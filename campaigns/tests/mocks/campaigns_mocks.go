// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/roverplatform/rover/campaigns/jobs (interfaces: CampaignsStore)

// Package mock_jobs is a generated GoMock package.
package mock_jobs

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	campaigns "github.com/roverplatform/rover/campaigns"
	reflect "reflect"
)

// MockCampaignsStore is a mock of CampaignsStore interface
type MockCampaignsStore struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignsStoreMockRecorder
}

// MockCampaignsStoreMockRecorder is the mock recorder for MockCampaignsStore
type MockCampaignsStoreMockRecorder struct {
	mock *MockCampaignsStore
}

// NewMockCampaignsStore creates a new mock instance
func NewMockCampaignsStore(ctrl *gomock.Controller) *MockCampaignsStore {
	mock := &MockCampaignsStore{ctrl: ctrl}
	mock.recorder = &MockCampaignsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCampaignsStore) EXPECT() *MockCampaignsStoreMockRecorder {
	return m.recorder
}

// OneById mocks base method
func (m *MockCampaignsStore) OneById(arg0 context.Context, arg1, arg2 int32) (*campaigns.Campaign, error) {
	ret := m.ctrl.Call(m, "OneById", arg0, arg1, arg2)
	ret0, _ := ret[0].(*campaigns.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneById indicates an expected call of OneById
func (mr *MockCampaignsStoreMockRecorder) OneById(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneById", reflect.TypeOf((*MockCampaignsStore)(nil).OneById), arg0, arg1, arg2)
}

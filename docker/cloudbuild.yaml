steps:

# ----------------------------------------------------- #
#                   Container Cache                     #
#                                                       #
#     Fetch and cache images used to build and test     #
#    Allows for parallel steps to reuse cache images    #
# ----------------------------------------------------- #

  - id: 'container-cache-docker-compose-1.16.1'
    name: 'docker/compose:1.16.1'
    args:
      - 'version'

  - id: 'container-cache-node-7.10.1'
    name: 'node:7.10.1'
    entrypoint: 'sh'

  - id: 'container-cache-node-6.9.1'
    name: 'node:6.9.1'
    entrypoint: 'sh'

  - id: 'container-cache-complete'
    name: 'ubuntu'
    entrypoint: 'sh'
    args:
      - '-c'
      - printf "\n\n Container Cache Built ┏(＾0＾)┛┗(＾0＾) ┓\n\n"
    waitFor:
      - 'container-cache-docker-compose-1.16.1'
      - 'container-cache-node-7.10.1'
      - 'container-cache-node-6.9.1'

# ----------------------------------------------------- #
#                Formatting & Linting                   #
#                                                       #
# Run lint and formatting checkers before installation  #
# ----------------------------------------------------- #
  
  # TODO turn this into a prebuilt go-fmt container with more
  # meaningful output
  - id: 'fmt'
    name: 'gcr.io/cloud-builders/go:alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -x
        export GO_PKGS="./auth/... ./audience/... ./campaigns/... ./notification/... ./go/..."

        files=$(go fmt $$GO_PKGS)
        if [[ $? != 0 ]]; then
            echo "Command failed."
            exit 1
        elif [[ $files ]]; then
            echo $files
            echo "Files found."
            exit 1
        else
            echo "No files found."
        fi
    waitFor:
      - 'container-cache-complete'
  # golint
  # - name: 'gcr.io/cloud-builders/go:alpine'
  #   entrypoint: 'sh'
  #   args:
  #     - '-c'
  #     - |
  #       set -x
  #       go get -u github.com/golang/lint/golint
  #       golint ./...
  #   id: 'lint'
  #   waitFor:
  #     - 'fmt'

  # End of Format/Lint stage
  - id: 'lint-complete'
    name: 'ubuntu'
    entrypoint: 'sh'
    args:
      - '-c'
      - printf "\n\n Lint Stage Complete ( ͡° ͜ʖ ͡°)\n\n"
    waitFor:
      - 'fmt'



# ----------------------------------------------------- #
#                    Installation                       #
#                                                       #
#  Use this stage to import external packages eg. npm   #
# ----------------------------------------------------- #


# @rover/apis node module
  - id: 'install-rover-apis'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args:
      - install
      - --silent
    dir: 'apis/node'
    waitFor:
      - 'lint-complete'

# Bulk Gateway
  - id: 'install-bulk-gateway'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args:
      - install
      - --silent
    dir: 'bulk-gateway'
    waitFor:
      - 'lint-complete'

# GraphQL Gateway
  - id: 'install-graphql-gateway'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args:
      - install
      - --silent
    dir: 'graphql-gateway'
    env:
      - 'NPM_TOKEN=dad33a01-0f48-47df-9797-9b36dd5f957c'
    waitFor:
      - 'lint-complete'

# REST Gateway
  - id: 'install-rest-gateway'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args:
      - install
      - --silent
    dir: 'rest-gateway'
    waitFor:
      - 'lint-complete'

# Scheduled Messages Worker
  - id: 'install-scheduled-messages-worker'
    name: 'node:6.9.1'
    entrypoint: 'npm'
    args:
      - install
      - --silent
    dir: 'scheduled-messages-worker'
    env:
      - 'NPM_TOKEN=dad33a01-0f48-47df-9797-9b36dd5f957c'
    waitFor:
      - 'lint-complete'

# SDK API
  - id: 'install-sdk-api'
    name: 'node:6.9.1'
    entrypoint: 'npm'
    args:
      - install
      - --silent
    dir: 'sdk-api'
    env:
      - 'NPM_TOKEN=dad33a01-0f48-47df-9797-9b36dd5f957c'
    waitFor:
      - 'lint-complete'


# End Install Stage
  - id: 'install-complete'
    name: 'ubuntu'
    entrypoint: 'sh'
    args:
      - '-c'
      - printf "\n\n Install Stage Complete (ᵔᴥᵔ)\n\n"
    waitFor:
      - 'install-rover-apis'
      - 'install-bulk-gateway'
      - 'install-graphql-gateway'
      - 'install-rest-gateway'
      - 'install-scheduled-messages-worker'
      - 'install-sdk-api'


# ----------------------------------------------------- #
#                        Test                           #
#                                                       #
#   Run integration & unit tests for all packages       #
# ----------------------------------------------------- #
  
# TODO figure out a clean way to use docker-compose for integration tests
# Note use a uniq --project-name property so ensure each run does not interfere with others



# Go Code
  - id: 'test-go-code'
    name: 'gcr.io/cloud-builders/go:alpine'
    env:
      - PROJECT_ROOT=github.com/roverplatform/rover
    args:
      - test
      - ./go/...
    waitFor:
      - lint-complete

# Auth Service
  - id: 'test-auth-service'
    name: 'docker/compose:1.16.1'
    args:
     - -p
     - test-auth-service
     - -f
     - ./docker/main.docker-compose.yaml 
     - run 
     - auth-service
     - docker/auth/cmd 
     - test
    waitFor:
      - 'install-complete'

# Audience Service
  - id: 'test-audience-service'
    name: 'docker/compose:1.16.1'
    args:
      - -p
      - test-audience-service
      - -f
      - ./docker/main.docker-compose.yaml
      - run
      - audience-service
      - docker/audience/cmd
      - test
    waitFor:
      - 'install-complete'

# Campaigns Service
  - id: 'test-campaigns'
    name: 'docker/compose:1.16.1'
    args:
      - -p
      - test-campaigns
      - -f
      - ./docker/main.docker-compose.yaml
      - run
      - campaigns-service
      - docker/campaigns/cmd
      - test
    waitFor:
      - 'install-complete'

# Events Pipeline
  - id: 'test-events-pipeline'
    name: 'docker/compose:1.16.1'
    args:
      - -p
      - test-events-pipeline
      - -f
      - ./events/backend/test.docker-compose.yaml
      - run
      - events-pipeline
      - docker/events/pipeline/cmd
      - test
    waitFor:
      - 'install-complete'

# @rover/apis node module
  - id: 'test-rover-apis'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args:
      - test
    dir: 'apis/node'
    waitFor:
      - 'install-complete'

# SDK-API
  - id: 'test-sdk-api'
    name: 'node:6.9.1'
    entrypoint: 'npm'
    args:
      - test
    dir: 'sdk-api'
    waitFor:
      - 'install-complete'

# Bulk Gateway
  - id: 'test-bulk-gateway'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args:
      - test
    dir: 'bulk-gateway'
    waitFor:
      - 'install-complete'

# Notification Service
  - id: 'test-notification'
    name: 'docker/compose:1.16.1'
    args:
      - -p
      - test-notification
      - -f
      - ./docker/main.docker-compose.yaml
      - run
      - notification-service
      - docker/notification/cmd
      - test
    waitFor:
      - 'install-complete'
      - 'test-audience-service'
      - 'test-campaigns'

# Clean up the images running. This frees memory from the cloudbuilder server
  - id: 'test-cleanup-docker-compose'
    name: 'docker/compose:1.16.1'
    args:
      - -f
      - ./docker/main.docker-compose.yaml
      - kill
    waitFor:
        - 'test-auth-service'
        - 'test-audience-service'
        - 'test-campaigns'
        - 'test-notification'
        - 'test-events-pipeline'
        - 'test-rover-apis'
        - 'test-sdk-api'
        - 'test-bulk-gateway'

# End Test Stage
  - id: 'test-complete'
    name: 'ubuntu'
    entrypoint: 'sh'
    args:
      - '-c'
      - printf "\n\n Test Stage Complete (☞ﾟヮﾟ)☞\n\n"
    waitFor:
      - 'test-cleanup-docker-compose'



# ----------------------------------------------------- #
#                       Build                           #
#                                                       #
#   Build all apps into their production docker images  #
# ----------------------------------------------------- #

# Auth Project
  - id: 'build-auth-binaries'
    name: 'gcr.io/$PROJECT_ID/golang:1.10-alpine'
    env:
      - PROJECT_ROOT=github.com/roverplatform/rover
    args:
      - install
      - ./go/cmd/postgres-cli
      - ./auth/service/cmd/auth-service
    waitFor:
      - 'test-complete'


  - id: 'build-auth-resources'
    name: 'ubuntu'
    entrypoint: 'sh'
    args:
      - -c
      - |
        export DEST=docker/auth/build
        mkdir -p $$DEST $$DEST/bin/ $$DEST/postgres/migrations
        cp -r ./gopath/bin/auth-* $$DEST/bin/
        cp -r ./gopath/bin/postgres-cli $$DEST/bin/
        cp -r ./auth/service/db/migrations/postgres $$DEST/postgres/migrations
    waitFor:
      - 'build-auth-binaries'

  - id: "build-auth-image"
    name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - --tag=gcr.io/$PROJECT_ID/auth:$SHORT_SHA
      - docker/auth/
    waitFor:
      - 'build-auth-resources'

# Audience Project
  - id: 'build-audience-binaries'
    name: 'gcr.io/$PROJECT_ID/golang:1.10-alpine'
    env:
      - PROJECT_ROOT=github.com/roverplatform/rover
    args:
      - install
      - ./audience/service/cmd/elastic-cli
      - ./audience/service/cmd/audience-service
      - ./audience/service/cmd/audience-segments-worker
      # - ./audience/service/cmd/migrations/...
    waitFor:
      - 'test-complete'


  - id: 'build-audience-resources'
    name: 'ubuntu'
    entrypoint: 'sh'
    args:
      - -c
      - |
        export DEST=docker/audience/build
        mkdir -p $$DEST/bin
        cp -r ./gopath/bin/audience-* $$DEST/bin/
        cp -r ./gopath/bin/elastic-cli $$DEST/bin/
    waitFor:
      - 'build-audience-binaries'

  - id: "build-audience-image"
    name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - --tag=gcr.io/$PROJECT_ID/audience:$SHORT_SHA
      - docker/audience/
    waitFor:
      - 'build-audience-resources'

# Campaigns Project
  - id: 'build-campaigns-binaries'
    name: 'gcr.io/$PROJECT_ID/golang:1.10-alpine'
    env:
      - PROJECT_ROOT=github.com/roverplatform/rover
    args:
      - install
      - ./go/cmd/postgres-cli
      - ./campaigns/cmd/campaigns-service
      - ./campaigns/cmd/campaigns-scheduled_notification_tasks-worker
    waitFor:
      - 'test-complete'


  - id: 'build-campaigns-resources'
    name: 'ubuntu'
    entrypoint: 'sh'
    args:
      - -c
      - |
        export DEST=docker/campaigns/build
        mkdir -p $$DEST/bin $$DEST/postgres
        cp -r campaigns/db/migrations $$DEST/postgres/
        cp -r ./gopath/bin/campaigns-* $$DEST/bin/
        cp -r ./gopath/bin/postgres-cli $$DEST/bin/
    waitFor:
      - 'build-campaigns-binaries'

  - id: "build-campaigns-image"
    name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - --tag=gcr.io/$PROJECT_ID/campaigns:$SHORT_SHA
      - docker/campaigns/
    waitFor:
      - 'build-campaigns-resources'

# Notification Project
  - id: 'build-notification-executables'
    name: 'gcr.io/$PROJECT_ID/golang:1.10-alpine'
    env:
      - PROJECT_ROOT=github.com/roverplatform/rover
    args:
      - install
      - ./notification/cmd/...
      - ./go/cmd/postgres-cli
      - ./go/cmd/scylla-cli
    waitFor:
      - 'test-complete'

  - id: 'build-notification-resources'
    name: 'ubuntu'
    entrypoint: 'sh'
    args:
      - -c
      - |
        export DEST=docker/notification/build
        mkdir -p $$DEST/bin $$DEST/postgres/ $$DEST/scylla/
        cp -r ./notification/postgres/migrations $$DEST/postgres/migrations
        cp -r ./notification/scylla/migrations $$DEST/scylla/migrations
        cp -r ./gopath/bin/notification-* $$DEST/bin/
        cp -r ./gopath/bin/postgres-cli $$DEST/bin/
        cp -r ./gopath/bin/scylla-cli $$DEST/bin/
    waitFor:
      - 'build-notification-executables'

  - id: "build-notification-image"
    name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - --tag=gcr.io/$PROJECT_ID/notification:$SHORT_SHA
      - docker/notification/
    waitFor:
      - 'build-notification-resources'

# Events Pipeline
  - id: 'build-events-pipeline-executable'
    name: 'gcr.io/$PROJECT_ID/golang-rdkafka:1.10-alpine'
    env:
      - PROJECT_ROOT=github.com/roverplatform/rover
    args:
      - build
      - -tags
      - static_all
      - -o
      - docker/events/pipeline/pipeline
      - github.com/roverplatform/rover/events/backend/cmd/pipeline
    waitFor:
      - 'test-complete'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - --tag=gcr.io/$PROJECT_ID/events-pipeline:$SHORT_SHA
      - docker/events/pipeline
    waitFor:
      - 'build-events-pipeline-executable'

# Bulk Gateway
  
  - id: 'build-bulk-gateway-prune'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args: 
      - prune
      - --production
      - --silent
    dir: 'bulk-gateway'
    waitFor:
      - 'test-complete'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - '--tag=gcr.io/$PROJECT_ID/bulk-gateway:$SHORT_SHA'
      - 'bulk-gateway'
    waitFor:
      - 'build-bulk-gateway-prune'


# GraphQL Gateway

  # Transpile with babel
  - id: 'build-graphql-gateway-transpile'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args:
      - run
      - build
    dir: 'graphql-gateway'

  # Remove all devDependencies
  - id: 'build-graphql-gateway-prune'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args: 
      - prune
      - --production
      - --silent
    dir: 'graphql-gateway'
    waitFor:
      - 'build-graphql-gateway-transpile'

  # Build final production image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--tag=gcr.io/$PROJECT_ID/graphql-gateway:$SHORT_SHA'
      - 'graphql-gateway'
    waitFor:
      - 'build-graphql-gateway-prune'

# REST Gateway
  - id: 'build-rest-gateway-prune'
    name: 'node:7.10.1'
    entrypoint: 'npm'
    args: 
      - prune
      - --production
      - --silent
    dir: 'rest-gateway'
    waitFor:
      - 'test-complete'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - '--tag=gcr.io/$PROJECT_ID/rest-gateway:$SHORT_SHA'
      - 'rest-gateway'
    waitFor:
      - 'build-rest-gateway-prune'

# Scheduled Messages Worker
  - id: 'build-scheduled-messages-worker-prune'
    name: 'node:6.9.1'
    entrypoint: 'npm'
    args: 
      - prune
      - --production
      - --silent
    dir: 'scheduled-messages-worker'
    env:
      - 'NPM_TOKEN=dad33a01-0f48-47df-9797-9b36dd5f957c'
    waitFor:
      - 'test-complete'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - '--tag=gcr.io/$PROJECT_ID/scheduled-messages-worker:$SHORT_SHA'
      - 'scheduled-messages-worker'
    waitFor:
      - 'build-scheduled-messages-worker-prune'

# SDK API
  - id: 'build-sdk-api-prune'
    name: 'node:6.9.1'
    entrypoint: 'npm'
    args: 
      - prune
      - --production
      - --silent
    dir: 'sdk-api'
    waitFor:
      - 'test-complete'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - '--tag=gcr.io/$PROJECT_ID/sdk-api:$SHORT_SHA'
      - 'sdk-api'
    waitFor:
      - 'build-sdk-api-prune'

options:
  machineType: 'N1_HIGHCPU_32'

# ----------------------------------------------------- #
#                       Images                          #
#                                                       #
#            Upload any built images to GCR             #
# ----------------------------------------------------- #

images:
  - 'gcr.io/$PROJECT_ID/auth:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/audience:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/campaigns:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/notification:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/events-pipeline:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/bulk-gateway:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/graphql-gateway:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/rest-gateway:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/scheduled-messages-worker:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/sdk-api:$SHORT_SHA'

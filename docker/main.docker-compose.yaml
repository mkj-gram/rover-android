version: "3"

volumes:
  cachefs:
  pgdata:
  esdata:
  mongodata:

services:

  pubsub:
    build:
      context: ./pubsub
    volumes:
      - ../../rover:/rover
    ports: 
      - "8085"

  # DATABASES
  mongo:
    image: mongo:3.4.4
    ports:
      - 27017
    volumes:
      - ../../rover:/rover
      - mongodata:/data/db

  kafka:
      image: spotify/kafka
      environment:
        - AUTO_CREATE_TOPICS=true
        - ADVERTISED_HOST=kafka
        - NUM_PARTITIONS=3

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.5.2
    ports:
      - 9200
      - 9300
    volumes:
      - ../:/rover
      - esdata:/usr/share/elasticsearch/data
    environment:
      xpack.monitoring.enabled: "false"
      xpack.security.enabled: "false"
      transport.host: "127.0.0.1"
      network.host: "0.0.0.0"
      http.host: "0.0.0.0"
      cluster.name: docker-cluster
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"

  postgres:
    image: postgres:9.6-alpine
    ports: [5432]
    volumes:
      # postgres runs *.sql from /docker-entrypoint-initdb.d on startup
      - ./vendor/postgres/initdb.d:/docker-entrypoint-initdb.d/

  scylla:
    image: scylladb/scylla:2.1.1

  redis:
    image: redis:4.0.2-alpine

  rabbitmq:
    build:
      context: ./vendor/rabbitmq
    ports:
      - 15672

  kafka:
    image: spotify/kafka
    environment:
      - AUTO_CREATE_TOPICS=true
      - ADVERTISED_HOST=kafka
      - NUM_PARTITIONS=3
        
  # ROVER PROJECTS
  audience-frontend:
    image: node:6.12.0
    depends_on:
      - graphql-gateway
    volumes:
      - ../:/rover:delegated
    working_dir: /rover/react-audience
    command: bash -c "/rover/docker/scripts/wait.sh graphql-gateway:80 -t 60 -- npm install && npm run schema && npm run relay && npm start"
    environment:
      NODE_ENV: development
      GRAPHQL_HOST: "http://graphql-gateway/graphql"

  audience-service:
    image: golang:1.10-alpine
    depends_on:
      - mongo
      - elastic
      - pubsub
      - segments-worker
    command: ./docker/audience-service/cmd configure_pubsub run
    volumes:
      - ../:/go/src/github.com/roverplatform/rover
    working_dir: /go/src/github.com/roverplatform/rover
    environment:
      CGO_ENABLED: 0
      AUDIENCE_SERVICE_PUBSUB_TOPIC_NAME: "audience-service-dev-topic"
      AUDIENCE_SERVICE_MONGO_DSN: "mongodb://mongo:27017/audience_service_dev"
      AUDIENCE_SERVICE_ELASTIC_DSN: "http://elastic:9200"
      AUDIENCE_SERVICE_NOTIFIER_FLUSH_INTERVAL: 5s
      AUDIENCE_SERVICE_GCP_PROJECT_ID: "rover-development"
      PUBSUB_EMULATOR_HOST: "pubsub:8085"
      GCP_PROJECT_ID: "rover-development"
      PUBSUB_TOPIC_NAME: "audience-service-dev-topic"           # Used in pubsub-cli to configure the topic
      PUBSUB_SUBSCRIPTION: "audience-service-dev-subscription"  # Used in pubsub-cli to configure the topic

  segments-worker:
    image: golang:1.10-alpine
    depends_on:
      - pubsub
      - elastic
      - mongo
    command: ./docker/audience-segments-worker/cmd configure_pubsub run
    volumes:
      - ../:/go/src/github.com/roverplatform/rover
    working_dir: /go/src/github.com/roverplatform/rover
    environment: 
      SEGMENTS_WORKER_MONGO_DSN: "mongodb://mongo:27017/audience_service_dev"
      SEGMENTS_WORKER_ELASTIC_DSN: "http://elastic:9200"
      SEGMENTS_WORKER_PUBSUB_SUBSCRIPTION: "audience-service-dev-subscription"
      SEGMENTS_WORKER_GCP_PROJECT_ID: "rover-development"
      PUBSUB_EMULATOR_HOST: "pubsub:8085"
      GCP_PROJECT_ID: "rover-development"
      PUBSUB_TOPIC_NAME: "audience-service-dev-topic"           # Used in pubsub-cli to configure the topic
      PUBSUB_SUBSCRIPTION: "audience-service-dev-subscription"  # Used in pubsub-cli to configure the topic

  auth-service:
    image: golang:1.10-alpine
    working_dir: /go/src/github.com/roverplatform/rover
    depends_on:
      - postgres
    command: ./docker/auth-service/cmd migrate run
    volumes:
      - ../:/go/src/github.com/roverplatform/rover
    environment:
      CGO_ENABLED: 0
      DB_DSN: "postgres://postgres:@postgres:5432/authsvc_dev?sslmode=disable"
      MIGRATION_DIR: ./auth/service/db/migrations/postgres

  campaigns-service:
    image: golang:1.10-alpine
    working_dir: /go/src/github.com/roverplatform/rover
    depends_on:
      - postgres
      - elastic
      - mongo
      - audience-service
      - scheduled_notification_tasks-worker
    command: ./docker/campaigns-service/cmd migrate run
    volumes:
      - ../:/go/src/github.com/roverplatform/rover
    environment:
      CGO_ENABLED: 0
      DB_DSN: "postgres://postgres:@postgres:5432/campaigns_dev?sslmode=disable"
      TEST_DB_DSN: "postgres://postgres:@postgres:5432/campaigns_test?sslmode=disable"

  scheduled_notification_tasks-worker:
    image: golang:1.10-alpine
    working_dir: /go/src/github.com/roverplatform/rover
    depends_on:
      - postgres
      - audience-service
    command: ./docker/campaigns-service/scheduled_notifications/cmd migrate run
    volumes:
      - ../:/go/src/github.com/roverplatform/rover
    environment:
      CGO_ENABLED: 0
      DB_DSN: "postgres://postgres:@postgres:5432/campaigns_dev?sslmode=disable"
      AUDIENCE_SERVICE_URL: "audience-service:5100"

  notification-service:
    ports: [5080]
    image: golang:1.10-alpine
    working_dir: /go/src/github.com/roverplatform/rover
    depends_on:
      - postgres
      - scylla
      - pubsub
    command: ./docker/notification-service/cmd migrate run
    volumes:
      - ../:/go/src/github.com/roverplatform/rover
    environment:
      CGO_ENABLED: 0
      PUBSUB_EMULATOR_HOST: "pubsub:8085"
      DB_DSN: "postgres://postgres:@postgres:5432/notification_dev?sslmode=disable"
      TEST_DB_DSN: "postgres://postgres:@postgres:5432/notification_test?sslmode=disable"
      SCYLLADB_DSN: "scylla://scylla:9042/notification_dev"
      TEST_SCYLLADB_DSN: "scylla://scylla:9042/notification_test"

  campaigns-frontend:
    image: node:7.5.0
    depends_on:
      - graphql-gateway
    volumes:
      - ../:/rover:delegated
    working_dir: /rover/react-campaigns
    command: bash -c "npm install && npm start"
    environment:
      NODE_ENV: development
      GRAPHQL_HOST: "http://graphql-gateway/graphql"

  graphql-gateway:
    image: node:7.5.0
    depends_on:
      - auth-service
      - audience-service
      - campaigns-service
      - kafka
    ports:
      - "4000:80"
    command: bash -c "rm -rf node_modules/@rover && npm install && npm run build && npm start"
    volumes:
      - ../:/rover:delegated
    working_dir: /rover/graphql-gateway
    environment:
      AUTH_V1_SERVICE_HOST: auth-service
      AUDIENCE_V1_SERVICE_HOST: audience-service
      CAMPAIGNS_V1_SERVICE_HOST: campaigns-service
      KAFKA_DSN: kafka:9092
      EVENTS_PIPELINE_INPUT_TOPIC: events.input
      NODE_ENV: development

  geocoder-service:
    image: golang:1.10-alpine
    working_dir: /go/src/github.com/roverplatform/rover
    depends_on:
      - redis
    command: go run ./geocoder/service/cmd/service/main.go
    volumes:
      - ../:/go/src/github.com/roverplatform/rover
    environment:
      GEOCODER_SERVICE_GCP_API_KEY: "AIzaSyBNFTti0wKJ3J_FMw1tCpTB4bPyQ8j53bc"
      GEOCODER_SERVICE_REDIS_DSN: "redis://redis:6379/3"

  events-pipeline:
    image: roverio/golang-rdkafka:1.10-alpine
    command: ./docker/events/pipeline/cmd run
    volumes:
      - ../:/go/src/github.com/roverplatform/rover
    working_dir: /go/src/github.com/roverplatform/rover
    depends_on:
      - kafka
      - audience-service
      - geocoder-service
    environment:
      CGO_ENABLED: 1
      KAFKA_DSN: kafka:9092
      INPUT_TOPIC: events.input
      OUTPUT_TOPIC: events.output
      AUDIENCE_SERVICE_DSN: audience-service:5100
      GEOCODER_SERVICE_DSN: geocoder-service:5100

  smw:
    image: node:6.9.1
    working_dir: /rover/scheduled-messages-worker
    volumes:
      - ../:/rover/
    depends_on:
      - mongo
      - rabbitmq
      - redis
      - audience-service
    command: bash -c "/rover/docker/scripts/wait.sh rabbitmq:5672 -s -- npm install && npm start"
    environment:
      NODE_ENV: production
      LOG_LEVEL: DEBUG
      DEBUG: job:*
      DEBUG_COLORS: 1
      REDIS_URL: redis://redis/1
      REDIS_INBOX_URL: redis://redis/2
      RAVEN_ENABLED: "false"
      CLOUDAMQP_URL: amqp://rabbitmq
      MONGODB_URI: mongodb://mongo:27017/rover-local
      AUDIENCE_V1_SERVICE_HOST: audience-service
      NPM_TOKEN: dad33a01-0f48-47df-9797-9b36dd5f957c

  sdk-api:
    image: node:7.5
    depends_on:
      - rabbitmq
      - redis
      - postgres
      - audience-service
      - auth-service
      - geocoder-service
    working_dir: /rover/sdk-api
    ports: [3100]
    volumes:
      - ../:/rover
    command: bash -c "/rover/docker/scripts/wait.sh rabbitmq:5672 -- npm install && npm run dev"
    environment:
      NODE_ENV: production

      POSTGRESQL_DB_HOST: postgres
      POSTGRESQL_DB_NAME: rover-local

      REDIS_URL: redis://redis:6379/0
      REDIS_INBOX_URL: redis://redis:6379/1

      AUDIENCE_V1_SERVICE_HOST: audience-service
      AUTH_V1_SERVICE_HOST: auth-service
      GEOCODER_V1_SERVICE_HOST: geocoder-service

      MONGODB_URI: mongodb://mongo:27017/sdk-api-dev

      ELASTICSEARCH_URLS: http://elastic:9200/

      CLOUDAMQP_URL: amqp://rabbitmq

      LOG_LEVEL: "debug"
      PORT: 3100

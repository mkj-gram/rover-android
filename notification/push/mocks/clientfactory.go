// Code generated by MockGen. DO NOT EDIT.
// Source: ./notification/push/clientfactory.go

// Package mock_push is a generated GoMock package.
package mock_push

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	postgres "github.com/roverplatform/rover/notification/postgres"
	reflect "reflect"
)

// MockIosPlatformStore is a mock of IosPlatformStore interface
type MockIosPlatformStore struct {
	ctrl     *gomock.Controller
	recorder *MockIosPlatformStoreMockRecorder
}

// MockIosPlatformStoreMockRecorder is the mock recorder for MockIosPlatformStore
type MockIosPlatformStoreMockRecorder struct {
	mock *MockIosPlatformStore
}

// NewMockIosPlatformStore creates a new mock instance
func NewMockIosPlatformStore(ctrl *gomock.Controller) *MockIosPlatformStore {
	mock := &MockIosPlatformStore{ctrl: ctrl}
	mock.recorder = &MockIosPlatformStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIosPlatformStore) EXPECT() *MockIosPlatformStoreMockRecorder {
	return m.recorder
}

// ListByAccountId mocks base method
func (m *MockIosPlatformStore) ListByAccountId(ctx context.Context, acctId int32) ([]*postgres.IosPlatform, error) {
	ret := m.ctrl.Call(m, "ListByAccountId", ctx, acctId)
	ret0, _ := ret[0].([]*postgres.IosPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountId indicates an expected call of ListByAccountId
func (mr *MockIosPlatformStoreMockRecorder) ListByAccountId(ctx, acctId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountId", reflect.TypeOf((*MockIosPlatformStore)(nil).ListByAccountId), ctx, acctId)
}

// MockAndroidPlatformStore is a mock of AndroidPlatformStore interface
type MockAndroidPlatformStore struct {
	ctrl     *gomock.Controller
	recorder *MockAndroidPlatformStoreMockRecorder
}

// MockAndroidPlatformStoreMockRecorder is the mock recorder for MockAndroidPlatformStore
type MockAndroidPlatformStoreMockRecorder struct {
	mock *MockAndroidPlatformStore
}

// NewMockAndroidPlatformStore creates a new mock instance
func NewMockAndroidPlatformStore(ctrl *gomock.Controller) *MockAndroidPlatformStore {
	mock := &MockAndroidPlatformStore{ctrl: ctrl}
	mock.recorder = &MockAndroidPlatformStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAndroidPlatformStore) EXPECT() *MockAndroidPlatformStoreMockRecorder {
	return m.recorder
}

// ListByAccountId mocks base method
func (m *MockAndroidPlatformStore) ListByAccountId(ctx context.Context, acctId int32) ([]*postgres.AndroidPlatform, error) {
	ret := m.ctrl.Call(m, "ListByAccountId", ctx, acctId)
	ret0, _ := ret[0].([]*postgres.AndroidPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountId indicates an expected call of ListByAccountId
func (mr *MockAndroidPlatformStoreMockRecorder) ListByAccountId(ctx, acctId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountId", reflect.TypeOf((*MockAndroidPlatformStore)(nil).ListByAccountId), ctx, acctId)
}

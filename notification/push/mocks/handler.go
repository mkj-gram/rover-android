// Code generated by MockGen. DO NOT EDIT.
// Source: ./notification/push/handler.go

// Package mock_push is a generated GoMock package.
package mock_push

import (
	context "context"
	go_fcm "github.com/appleboy/go-fcm"
	gomock "github.com/golang/mock/gomock"
	scylla "github.com/roverplatform/rover/notification/scylla"
	apns2 "github.com/sideshow/apns2"
	reflect "reflect"
)

// MockclientFactory is a mock of clientFactory interface
type MockclientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockclientFactoryMockRecorder
}

// MockclientFactoryMockRecorder is the mock recorder for MockclientFactory
type MockclientFactoryMockRecorder struct {
	mock *MockclientFactory
}

// NewMockclientFactory creates a new mock instance
func NewMockclientFactory(ctrl *gomock.Controller) *MockclientFactory {
	mock := &MockclientFactory{ctrl: ctrl}
	mock.recorder = &MockclientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockclientFactory) EXPECT() *MockclientFactoryMockRecorder {
	return m.recorder
}

// GetAPNSClient mocks base method
func (m *MockclientFactory) GetAPNSClient(ctx context.Context, acctId int32, bundleId, env string) (*apns2.Client, error) {
	ret := m.ctrl.Call(m, "GetAPNSClient", ctx, acctId, bundleId, env)
	ret0, _ := ret[0].(*apns2.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPNSClient indicates an expected call of GetAPNSClient
func (mr *MockclientFactoryMockRecorder) GetAPNSClient(ctx, acctId, bundleId, env interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPNSClient", reflect.TypeOf((*MockclientFactory)(nil).GetAPNSClient), ctx, acctId, bundleId, env)
}

// GetFCMClient mocks base method
func (m *MockclientFactory) GetFCMClient(ctx context.Context, acctId int32) (*go_fcm.Client, error) {
	ret := m.ctrl.Call(m, "GetFCMClient", ctx, acctId)
	ret0, _ := ret[0].(*go_fcm.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCMClient indicates an expected call of GetFCMClient
func (mr *MockclientFactoryMockRecorder) GetFCMClient(ctx, acctId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFCMClient", reflect.TypeOf((*MockclientFactory)(nil).GetFCMClient), ctx, acctId)
}

// MocknotificationSettingsStore is a mock of notificationSettingsStore interface
type MocknotificationSettingsStore struct {
	ctrl     *gomock.Controller
	recorder *MocknotificationSettingsStoreMockRecorder
}

// MocknotificationSettingsStoreMockRecorder is the mock recorder for MocknotificationSettingsStore
type MocknotificationSettingsStoreMockRecorder struct {
	mock *MocknotificationSettingsStore
}

// NewMocknotificationSettingsStore creates a new mock instance
func NewMocknotificationSettingsStore(ctrl *gomock.Controller) *MocknotificationSettingsStore {
	mock := &MocknotificationSettingsStore{ctrl: ctrl}
	mock.recorder = &MocknotificationSettingsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocknotificationSettingsStore) EXPECT() *MocknotificationSettingsStoreMockRecorder {
	return m.recorder
}

// OneById mocks base method
func (m *MocknotificationSettingsStore) OneById(ctx context.Context, campaignId int32) (*scylla.NotificationSettings, error) {
	ret := m.ctrl.Call(m, "OneById", ctx, campaignId)
	ret0, _ := ret[0].(*scylla.NotificationSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneById indicates an expected call of OneById
func (mr *MocknotificationSettingsStoreMockRecorder) OneById(ctx, campaignId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneById", reflect.TypeOf((*MocknotificationSettingsStore)(nil).OneById), ctx, campaignId)
}

// MocknotificationsStore is a mock of notificationsStore interface
type MocknotificationsStore struct {
	ctrl     *gomock.Controller
	recorder *MocknotificationsStoreMockRecorder
}

// MocknotificationsStoreMockRecorder is the mock recorder for MocknotificationsStore
type MocknotificationsStoreMockRecorder struct {
	mock *MocknotificationsStore
}

// NewMocknotificationsStore creates a new mock instance
func NewMocknotificationsStore(ctrl *gomock.Controller) *MocknotificationsStore {
	mock := &MocknotificationsStore{ctrl: ctrl}
	mock.recorder = &MocknotificationsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocknotificationsStore) EXPECT() *MocknotificationsStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MocknotificationsStore) Create(ctx context.Context, note *scylla.Notification) error {
	ret := m.ctrl.Call(m, "Create", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MocknotificationsStoreMockRecorder) Create(ctx, note interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocknotificationsStore)(nil).Create), ctx, note)
}

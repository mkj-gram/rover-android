// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/roverplatform/rover/analytics/backend/usecase (interfaces: NotificationOpenedStore,NotificationSentStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/roverplatform/rover/analytics/backend/domain"
)

// MockNotificationOpenedStore is a mock of NotificationOpenedStore interface
type MockNotificationOpenedStore struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationOpenedStoreMockRecorder
}

// MockNotificationOpenedStoreMockRecorder is the mock recorder for MockNotificationOpenedStore
type MockNotificationOpenedStoreMockRecorder struct {
	mock *MockNotificationOpenedStore
}

// NewMockNotificationOpenedStore creates a new mock instance
func NewMockNotificationOpenedStore(ctrl *gomock.Controller) *MockNotificationOpenedStore {
	mock := &MockNotificationOpenedStore{ctrl: ctrl}
	mock.recorder = &MockNotificationOpenedStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationOpenedStore) EXPECT() *MockNotificationOpenedStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNotificationOpenedStore) Create(arg0 ...*domain.NotificationOpenedRecord) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockNotificationOpenedStoreMockRecorder) Create(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationOpenedStore)(nil).Create), arg0...)
}

// GetReport mocks base method
func (m *MockNotificationOpenedStore) GetReport(arg0, arg1 int) (*domain.NotificationOpenedReport, error) {
	ret := m.ctrl.Call(m, "GetReport", arg0, arg1)
	ret0, _ := ret[0].(*domain.NotificationOpenedReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport
func (mr *MockNotificationOpenedStoreMockRecorder) GetReport(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockNotificationOpenedStore)(nil).GetReport), arg0, arg1)
}

// GetReportByDate mocks base method
func (m *MockNotificationOpenedStore) GetReportByDate(arg0, arg1 int, arg2, arg3 time.Time) (*domain.NotificationOpenedByDateReport, error) {
	ret := m.ctrl.Call(m, "GetReportByDate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.NotificationOpenedByDateReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportByDate indicates an expected call of GetReportByDate
func (mr *MockNotificationOpenedStoreMockRecorder) GetReportByDate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportByDate", reflect.TypeOf((*MockNotificationOpenedStore)(nil).GetReportByDate), arg0, arg1, arg2, arg3)
}

// MockNotificationSentStore is a mock of NotificationSentStore interface
type MockNotificationSentStore struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSentStoreMockRecorder
}

// MockNotificationSentStoreMockRecorder is the mock recorder for MockNotificationSentStore
type MockNotificationSentStoreMockRecorder struct {
	mock *MockNotificationSentStore
}

// NewMockNotificationSentStore creates a new mock instance
func NewMockNotificationSentStore(ctrl *gomock.Controller) *MockNotificationSentStore {
	mock := &MockNotificationSentStore{ctrl: ctrl}
	mock.recorder = &MockNotificationSentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationSentStore) EXPECT() *MockNotificationSentStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNotificationSentStore) Create(arg0 ...*domain.NotificationSentRecord) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockNotificationSentStoreMockRecorder) Create(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationSentStore)(nil).Create), arg0...)
}

// GetReport mocks base method
func (m *MockNotificationSentStore) GetReport(arg0, arg1 int) (*domain.NotificationSentReport, error) {
	ret := m.ctrl.Call(m, "GetReport", arg0, arg1)
	ret0, _ := ret[0].(*domain.NotificationSentReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport
func (mr *MockNotificationSentStoreMockRecorder) GetReport(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockNotificationSentStore)(nil).GetReport), arg0, arg1)
}

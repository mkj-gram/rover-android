/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.rover.event.v1.Array', null, global);
goog.exportSymbol('proto.rover.event.v1.Complex', null, global);
goog.exportSymbol('proto.rover.event.v1.EventSchema', null, global);
goog.exportSymbol('proto.rover.event.v1.GetSchemaRequest', null, global);
goog.exportSymbol('proto.rover.event.v1.GetSchemaResponse', null, global);
goog.exportSymbol('proto.rover.event.v1.Scalar', null, global);
goog.exportSymbol('proto.rover.event.v1.Scalar.Type', null, global);
goog.exportSymbol('proto.rover.event.v1.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.event.v1.GetSchemaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.event.v1.GetSchemaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.event.v1.GetSchemaRequest.displayName = 'proto.rover.event.v1.GetSchemaRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.event.v1.GetSchemaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.event.v1.GetSchemaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.event.v1.GetSchemaRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.event.v1.GetSchemaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    schemaVersion: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.event.v1.GetSchemaRequest}
 */
proto.rover.event.v1.GetSchemaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.event.v1.GetSchemaRequest;
  return proto.rover.event.v1.GetSchemaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.event.v1.GetSchemaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.event.v1.GetSchemaRequest}
 */
proto.rover.event.v1.GetSchemaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSchemaId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSchemaVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.event.v1.GetSchemaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.event.v1.GetSchemaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.event.v1.GetSchemaRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.event.v1.GetSchemaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSchemaVersion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 schema_id = 1;
 * @return {number}
 */
proto.rover.event.v1.GetSchemaRequest.prototype.getSchemaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rover.event.v1.GetSchemaRequest.prototype.setSchemaId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 schema_version = 2;
 * @return {number}
 */
proto.rover.event.v1.GetSchemaRequest.prototype.getSchemaVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rover.event.v1.GetSchemaRequest.prototype.setSchemaVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.event.v1.GetSchemaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.event.v1.GetSchemaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.event.v1.GetSchemaResponse.displayName = 'proto.rover.event.v1.GetSchemaResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.event.v1.GetSchemaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.event.v1.GetSchemaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.event.v1.GetSchemaResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.event.v1.GetSchemaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: (f = msg.getSchema()) && proto.rover.event.v1.EventSchema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.event.v1.GetSchemaResponse}
 */
proto.rover.event.v1.GetSchemaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.event.v1.GetSchemaResponse;
  return proto.rover.event.v1.GetSchemaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.event.v1.GetSchemaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.event.v1.GetSchemaResponse}
 */
proto.rover.event.v1.GetSchemaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rover.event.v1.EventSchema;
      reader.readMessage(value,proto.rover.event.v1.EventSchema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.event.v1.GetSchemaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.event.v1.GetSchemaResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.event.v1.GetSchemaResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.event.v1.GetSchemaResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rover.event.v1.EventSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventSchema schema = 1;
 * @return {?proto.rover.event.v1.EventSchema}
 */
proto.rover.event.v1.GetSchemaResponse.prototype.getSchema = function() {
  return /** @type{?proto.rover.event.v1.EventSchema} */ (
    jspb.Message.getWrapperField(this, proto.rover.event.v1.EventSchema, 1));
};


/** @param {?proto.rover.event.v1.EventSchema|undefined} value */
proto.rover.event.v1.GetSchemaResponse.prototype.setSchema = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.event.v1.GetSchemaResponse.prototype.clearSchema = function() {
  this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.event.v1.GetSchemaResponse.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.event.v1.Scalar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.event.v1.Scalar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.event.v1.Scalar.displayName = 'proto.rover.event.v1.Scalar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.event.v1.Scalar.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.event.v1.Scalar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.event.v1.Scalar} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.event.v1.Scalar.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.event.v1.Scalar}
 */
proto.rover.event.v1.Scalar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.event.v1.Scalar;
  return proto.rover.event.v1.Scalar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.event.v1.Scalar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.event.v1.Scalar}
 */
proto.rover.event.v1.Scalar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rover.event.v1.Scalar.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.event.v1.Scalar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.event.v1.Scalar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.event.v1.Scalar} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.event.v1.Scalar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rover.event.v1.Scalar.Type = {
  STRING: 0,
  NUMBER: 1,
  BOOLEAN: 2,
  TIMESTAMP: 3
};

/**
 * optional Type type = 1;
 * @return {!proto.rover.event.v1.Scalar.Type}
 */
proto.rover.event.v1.Scalar.prototype.getType = function() {
  return /** @type {!proto.rover.event.v1.Scalar.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.rover.event.v1.Scalar.Type} value */
proto.rover.event.v1.Scalar.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.event.v1.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.event.v1.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.event.v1.Array.displayName = 'proto.rover.event.v1.Array';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.event.v1.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.event.v1.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.event.v1.Array} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.event.v1.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    subtype: (f = msg.getSubtype()) && proto.rover.event.v1.Scalar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.event.v1.Array}
 */
proto.rover.event.v1.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.event.v1.Array;
  return proto.rover.event.v1.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.event.v1.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.event.v1.Array}
 */
proto.rover.event.v1.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rover.event.v1.Scalar;
      reader.readMessage(value,proto.rover.event.v1.Scalar.deserializeBinaryFromReader);
      msg.setSubtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.event.v1.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.event.v1.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.event.v1.Array} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.event.v1.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubtype();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rover.event.v1.Scalar.serializeBinaryToWriter
    );
  }
};


/**
 * optional Scalar subtype = 1;
 * @return {?proto.rover.event.v1.Scalar}
 */
proto.rover.event.v1.Array.prototype.getSubtype = function() {
  return /** @type{?proto.rover.event.v1.Scalar} */ (
    jspb.Message.getWrapperField(this, proto.rover.event.v1.Scalar, 1));
};


/** @param {?proto.rover.event.v1.Scalar|undefined} value */
proto.rover.event.v1.Array.prototype.setSubtype = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.event.v1.Array.prototype.clearSubtype = function() {
  this.setSubtype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.event.v1.Array.prototype.hasSubtype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.event.v1.Complex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.event.v1.Complex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.event.v1.Complex.displayName = 'proto.rover.event.v1.Complex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.event.v1.Complex.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.event.v1.Complex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.event.v1.Complex} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.event.v1.Complex.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, proto.rover.event.v1.Type.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.event.v1.Complex}
 */
proto.rover.event.v1.Complex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.event.v1.Complex;
  return proto.rover.event.v1.Complex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.event.v1.Complex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.event.v1.Complex}
 */
proto.rover.event.v1.Complex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rover.event.v1.Type.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.event.v1.Complex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.event.v1.Complex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.event.v1.Complex} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.event.v1.Complex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rover.event.v1.Type.serializeBinaryToWriter);
  }
};


/**
 * map<string, Type> attributes = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rover.event.v1.Type>}
 */
proto.rover.event.v1.Complex.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rover.event.v1.Type>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rover.event.v1.Type));
};


proto.rover.event.v1.Complex.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.event.v1.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rover.event.v1.Type.oneofGroups_);
};
goog.inherits(proto.rover.event.v1.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.event.v1.Type.displayName = 'proto.rover.event.v1.Type';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rover.event.v1.Type.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rover.event.v1.Type.TypeCase = {
  TYPE_NOT_SET: 0,
  SCALAR: 1,
  ARRAY: 2,
  COMPLEX: 3
};

/**
 * @return {proto.rover.event.v1.Type.TypeCase}
 */
proto.rover.event.v1.Type.prototype.getTypeCase = function() {
  return /** @type {proto.rover.event.v1.Type.TypeCase} */(jspb.Message.computeOneofCase(this, proto.rover.event.v1.Type.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.event.v1.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.event.v1.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.event.v1.Type} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.event.v1.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    scalar: (f = msg.getScalar()) && proto.rover.event.v1.Scalar.toObject(includeInstance, f),
    array: (f = msg.getArray()) && proto.rover.event.v1.Array.toObject(includeInstance, f),
    complex: (f = msg.getComplex()) && proto.rover.event.v1.Complex.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.event.v1.Type}
 */
proto.rover.event.v1.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.event.v1.Type;
  return proto.rover.event.v1.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.event.v1.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.event.v1.Type}
 */
proto.rover.event.v1.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rover.event.v1.Scalar;
      reader.readMessage(value,proto.rover.event.v1.Scalar.deserializeBinaryFromReader);
      msg.setScalar(value);
      break;
    case 2:
      var value = new proto.rover.event.v1.Array;
      reader.readMessage(value,proto.rover.event.v1.Array.deserializeBinaryFromReader);
      msg.setArray(value);
      break;
    case 3:
      var value = new proto.rover.event.v1.Complex;
      reader.readMessage(value,proto.rover.event.v1.Complex.deserializeBinaryFromReader);
      msg.setComplex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.event.v1.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.event.v1.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.event.v1.Type} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.event.v1.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScalar();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rover.event.v1.Scalar.serializeBinaryToWriter
    );
  }
  f = message.getArray();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rover.event.v1.Array.serializeBinaryToWriter
    );
  }
  f = message.getComplex();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rover.event.v1.Complex.serializeBinaryToWriter
    );
  }
};


/**
 * optional Scalar scalar = 1;
 * @return {?proto.rover.event.v1.Scalar}
 */
proto.rover.event.v1.Type.prototype.getScalar = function() {
  return /** @type{?proto.rover.event.v1.Scalar} */ (
    jspb.Message.getWrapperField(this, proto.rover.event.v1.Scalar, 1));
};


/** @param {?proto.rover.event.v1.Scalar|undefined} value */
proto.rover.event.v1.Type.prototype.setScalar = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.rover.event.v1.Type.oneofGroups_[0], value);
};


proto.rover.event.v1.Type.prototype.clearScalar = function() {
  this.setScalar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.event.v1.Type.prototype.hasScalar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Array array = 2;
 * @return {?proto.rover.event.v1.Array}
 */
proto.rover.event.v1.Type.prototype.getArray = function() {
  return /** @type{?proto.rover.event.v1.Array} */ (
    jspb.Message.getWrapperField(this, proto.rover.event.v1.Array, 2));
};


/** @param {?proto.rover.event.v1.Array|undefined} value */
proto.rover.event.v1.Type.prototype.setArray = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.rover.event.v1.Type.oneofGroups_[0], value);
};


proto.rover.event.v1.Type.prototype.clearArray = function() {
  this.setArray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.event.v1.Type.prototype.hasArray = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Complex complex = 3;
 * @return {?proto.rover.event.v1.Complex}
 */
proto.rover.event.v1.Type.prototype.getComplex = function() {
  return /** @type{?proto.rover.event.v1.Complex} */ (
    jspb.Message.getWrapperField(this, proto.rover.event.v1.Complex, 3));
};


/** @param {?proto.rover.event.v1.Complex|undefined} value */
proto.rover.event.v1.Type.prototype.setComplex = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.rover.event.v1.Type.oneofGroups_[0], value);
};


proto.rover.event.v1.Type.prototype.clearComplex = function() {
  this.setComplex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.event.v1.Type.prototype.hasComplex = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.event.v1.EventSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.event.v1.EventSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.event.v1.EventSchema.displayName = 'proto.rover.event.v1.EventSchema';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.event.v1.EventSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.event.v1.EventSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.event.v1.EventSchema} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.event.v1.EventSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    namespace: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    attributeSchema: (f = msg.getAttributeSchema()) && proto.rover.event.v1.Complex.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.event.v1.EventSchema}
 */
proto.rover.event.v1.EventSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.event.v1.EventSchema;
  return proto.rover.event.v1.EventSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.event.v1.EventSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.event.v1.EventSchema}
 */
proto.rover.event.v1.EventSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccountId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = new proto.rover.event.v1.Complex;
      reader.readMessage(value,proto.rover.event.v1.Complex.deserializeBinaryFromReader);
      msg.setAttributeSchema(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.event.v1.EventSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.event.v1.EventSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.event.v1.EventSchema} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.event.v1.EventSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAttributeSchema();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rover.event.v1.Complex.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.rover.event.v1.EventSchema.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rover.event.v1.EventSchema.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 version = 2;
 * @return {number}
 */
proto.rover.event.v1.EventSchema.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rover.event.v1.EventSchema.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 account_id = 3;
 * @return {number}
 */
proto.rover.event.v1.EventSchema.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rover.event.v1.EventSchema.prototype.setAccountId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string namespace = 4;
 * @return {string}
 */
proto.rover.event.v1.EventSchema.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.rover.event.v1.EventSchema.prototype.setNamespace = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.rover.event.v1.EventSchema.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.rover.event.v1.EventSchema.prototype.setName = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional Complex attribute_schema = 6;
 * @return {?proto.rover.event.v1.Complex}
 */
proto.rover.event.v1.EventSchema.prototype.getAttributeSchema = function() {
  return /** @type{?proto.rover.event.v1.Complex} */ (
    jspb.Message.getWrapperField(this, proto.rover.event.v1.Complex, 6));
};


/** @param {?proto.rover.event.v1.Complex|undefined} value */
proto.rover.event.v1.EventSchema.prototype.setAttributeSchema = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.rover.event.v1.EventSchema.prototype.clearAttributeSchema = function() {
  this.setAttributeSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.event.v1.EventSchema.prototype.hasAttributeSchema = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.rover.event.v1.EventSchema.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.rover.event.v1.EventSchema.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.rover.event.v1.EventSchema.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.event.v1.EventSchema.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto.rover.event.v1);

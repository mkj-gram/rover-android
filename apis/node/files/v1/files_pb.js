/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var auth_v1_auth_pb = require('../../auth/v1/auth_pb.js');
goog.exportSymbol('proto.rover.files.v1.CsvFile', null, global);
goog.exportSymbol('proto.rover.files.v1.CsvFile.Sample', null, global);
goog.exportSymbol('proto.rover.files.v1.DeleteCsvFileRequest', null, global);
goog.exportSymbol('proto.rover.files.v1.DeleteCsvFileResponse', null, global);
goog.exportSymbol('proto.rover.files.v1.GetCsvFileRequest', null, global);
goog.exportSymbol('proto.rover.files.v1.GetCsvFileResponse', null, global);
goog.exportSymbol('proto.rover.files.v1.ListCsvFilesRequest', null, global);
goog.exportSymbol('proto.rover.files.v1.ListCsvFilesResponse', null, global);
goog.exportSymbol('proto.rover.files.v1.ReadCsvFileRequest', null, global);
goog.exportSymbol('proto.rover.files.v1.ReadCsvFileResponse', null, global);
goog.exportSymbol('proto.rover.files.v1.UploadCsvFileRequest', null, global);
goog.exportSymbol('proto.rover.files.v1.UploadCsvFileRequest.Chunk', null, global);
goog.exportSymbol('proto.rover.files.v1.UploadCsvFileRequest.Meta', null, global);
goog.exportSymbol('proto.rover.files.v1.UploadCsvFileResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.CsvFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rover.files.v1.CsvFile.repeatedFields_, null);
};
goog.inherits(proto.rover.files.v1.CsvFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.CsvFile.displayName = 'proto.rover.files.v1.CsvFile';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rover.files.v1.CsvFile.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.CsvFile.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.CsvFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.CsvFile} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.CsvFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    numRows: jspb.Message.getFieldWithDefault(msg, 4, 0),
    numColumns: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fileSize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    samplesList: jspb.Message.toObjectList(msg.getSamplesList(),
    proto.rover.files.v1.CsvFile.Sample.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.CsvFile}
 */
proto.rover.files.v1.CsvFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.CsvFile;
  return proto.rover.files.v1.CsvFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.CsvFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.CsvFile}
 */
proto.rover.files.v1.CsvFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setNumRows(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setNumColumns(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setFileSize(value);
      break;
    case 7:
      var value = new proto.rover.files.v1.CsvFile.Sample;
      reader.readMessage(value,proto.rover.files.v1.CsvFile.Sample.deserializeBinaryFromReader);
      msg.addSamples(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.CsvFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.CsvFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.CsvFile} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.CsvFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNumRows();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getNumColumns();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getFileSize();
  if (f !== 0) {
    writer.writeSint64(
      6,
      f
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.rover.files.v1.CsvFile.Sample.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.CsvFile.Sample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rover.files.v1.CsvFile.Sample.repeatedFields_, null);
};
goog.inherits(proto.rover.files.v1.CsvFile.Sample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.CsvFile.Sample.displayName = 'proto.rover.files.v1.CsvFile.Sample';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rover.files.v1.CsvFile.Sample.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.CsvFile.Sample.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.CsvFile.Sample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.CsvFile.Sample} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.CsvFile.Sample.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.CsvFile.Sample}
 */
proto.rover.files.v1.CsvFile.Sample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.CsvFile.Sample;
  return proto.rover.files.v1.CsvFile.Sample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.CsvFile.Sample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.CsvFile.Sample}
 */
proto.rover.files.v1.CsvFile.Sample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.CsvFile.Sample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.CsvFile.Sample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.CsvFile.Sample} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.CsvFile.Sample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string data = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.rover.files.v1.CsvFile.Sample.prototype.getDataList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<string>} value */
proto.rover.files.v1.CsvFile.Sample.prototype.setDataList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.rover.files.v1.CsvFile.Sample.prototype.addData = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.rover.files.v1.CsvFile.Sample.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.rover.files.v1.CsvFile.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rover.files.v1.CsvFile.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 account_id = 2;
 * @return {number}
 */
proto.rover.files.v1.CsvFile.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rover.files.v1.CsvFile.prototype.setAccountId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string filename = 3;
 * @return {string}
 */
proto.rover.files.v1.CsvFile.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.rover.files.v1.CsvFile.prototype.setFilename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional sint32 num_rows = 4;
 * @return {number}
 */
proto.rover.files.v1.CsvFile.prototype.getNumRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.rover.files.v1.CsvFile.prototype.setNumRows = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional sint32 num_columns = 5;
 * @return {number}
 */
proto.rover.files.v1.CsvFile.prototype.getNumColumns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.rover.files.v1.CsvFile.prototype.setNumColumns = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional sint64 file_size = 6;
 * @return {number}
 */
proto.rover.files.v1.CsvFile.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.rover.files.v1.CsvFile.prototype.setFileSize = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated Sample samples = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rover.files.v1.CsvFile.Sample>}
 */
proto.rover.files.v1.CsvFile.prototype.getSamplesList = function() {
  return /** @type{!Array.<!proto.rover.files.v1.CsvFile.Sample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rover.files.v1.CsvFile.Sample, 7));
};


/** @param {!Array.<!proto.rover.files.v1.CsvFile.Sample>} value */
proto.rover.files.v1.CsvFile.prototype.setSamplesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.rover.files.v1.CsvFile.Sample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rover.files.v1.CsvFile.Sample}
 */
proto.rover.files.v1.CsvFile.prototype.addSamples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.rover.files.v1.CsvFile.Sample, opt_index);
};


proto.rover.files.v1.CsvFile.prototype.clearSamplesList = function() {
  this.setSamplesList([]);
};


/**
 * optional google.protobuf.Timestamp created_at = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.rover.files.v1.CsvFile.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.rover.files.v1.CsvFile.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.rover.files.v1.CsvFile.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.CsvFile.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.GetCsvFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.GetCsvFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.GetCsvFileRequest.displayName = 'proto.rover.files.v1.GetCsvFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.GetCsvFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.GetCsvFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.GetCsvFileRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.GetCsvFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && auth_v1_auth_pb.AuthContext.toObject(includeInstance, f),
    csvFileId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.GetCsvFileRequest}
 */
proto.rover.files.v1.GetCsvFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.GetCsvFileRequest;
  return proto.rover.files.v1.GetCsvFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.GetCsvFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.GetCsvFileRequest}
 */
proto.rover.files.v1.GetCsvFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new auth_v1_auth_pb.AuthContext;
      reader.readMessage(value,auth_v1_auth_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCsvFileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.GetCsvFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.GetCsvFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.GetCsvFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.GetCsvFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      auth_v1_auth_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getCsvFileId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional rover.auth.v1.AuthContext auth_context = 1;
 * @return {?proto.rover.auth.v1.AuthContext}
 */
proto.rover.files.v1.GetCsvFileRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.rover.auth.v1.AuthContext} */ (
    jspb.Message.getWrapperField(this, auth_v1_auth_pb.AuthContext, 1));
};


/** @param {?proto.rover.auth.v1.AuthContext|undefined} value */
proto.rover.files.v1.GetCsvFileRequest.prototype.setAuthContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.files.v1.GetCsvFileRequest.prototype.clearAuthContext = function() {
  this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.GetCsvFileRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 csv_file_id = 2;
 * @return {number}
 */
proto.rover.files.v1.GetCsvFileRequest.prototype.getCsvFileId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rover.files.v1.GetCsvFileRequest.prototype.setCsvFileId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.GetCsvFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.GetCsvFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.GetCsvFileResponse.displayName = 'proto.rover.files.v1.GetCsvFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.GetCsvFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.GetCsvFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.GetCsvFileResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.GetCsvFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    csvFile: (f = msg.getCsvFile()) && proto.rover.files.v1.CsvFile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.GetCsvFileResponse}
 */
proto.rover.files.v1.GetCsvFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.GetCsvFileResponse;
  return proto.rover.files.v1.GetCsvFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.GetCsvFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.GetCsvFileResponse}
 */
proto.rover.files.v1.GetCsvFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rover.files.v1.CsvFile;
      reader.readMessage(value,proto.rover.files.v1.CsvFile.deserializeBinaryFromReader);
      msg.setCsvFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.GetCsvFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.GetCsvFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.GetCsvFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.GetCsvFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsvFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rover.files.v1.CsvFile.serializeBinaryToWriter
    );
  }
};


/**
 * optional CsvFile csv_file = 1;
 * @return {?proto.rover.files.v1.CsvFile}
 */
proto.rover.files.v1.GetCsvFileResponse.prototype.getCsvFile = function() {
  return /** @type{?proto.rover.files.v1.CsvFile} */ (
    jspb.Message.getWrapperField(this, proto.rover.files.v1.CsvFile, 1));
};


/** @param {?proto.rover.files.v1.CsvFile|undefined} value */
proto.rover.files.v1.GetCsvFileResponse.prototype.setCsvFile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.files.v1.GetCsvFileResponse.prototype.clearCsvFile = function() {
  this.setCsvFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.GetCsvFileResponse.prototype.hasCsvFile = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.ListCsvFilesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.ListCsvFilesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.ListCsvFilesRequest.displayName = 'proto.rover.files.v1.ListCsvFilesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.ListCsvFilesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.ListCsvFilesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.ListCsvFilesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.ListCsvFilesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && auth_v1_auth_pb.AuthContext.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.ListCsvFilesRequest}
 */
proto.rover.files.v1.ListCsvFilesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.ListCsvFilesRequest;
  return proto.rover.files.v1.ListCsvFilesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.ListCsvFilesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.ListCsvFilesRequest}
 */
proto.rover.files.v1.ListCsvFilesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new auth_v1_auth_pb.AuthContext;
      reader.readMessage(value,auth_v1_auth_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderBy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.ListCsvFilesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.ListCsvFilesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.ListCsvFilesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.ListCsvFilesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      auth_v1_auth_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional rover.auth.v1.AuthContext auth_context = 1;
 * @return {?proto.rover.auth.v1.AuthContext}
 */
proto.rover.files.v1.ListCsvFilesRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.rover.auth.v1.AuthContext} */ (
    jspb.Message.getWrapperField(this, auth_v1_auth_pb.AuthContext, 1));
};


/** @param {?proto.rover.auth.v1.AuthContext|undefined} value */
proto.rover.files.v1.ListCsvFilesRequest.prototype.setAuthContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.files.v1.ListCsvFilesRequest.prototype.clearAuthContext = function() {
  this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.ListCsvFilesRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string order_by = 2;
 * @return {string}
 */
proto.rover.files.v1.ListCsvFilesRequest.prototype.getOrderBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rover.files.v1.ListCsvFilesRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 page_size = 3;
 * @return {number}
 */
proto.rover.files.v1.ListCsvFilesRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rover.files.v1.ListCsvFilesRequest.prototype.setPageSize = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string page_token = 4;
 * @return {string}
 */
proto.rover.files.v1.ListCsvFilesRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.rover.files.v1.ListCsvFilesRequest.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.ListCsvFilesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rover.files.v1.ListCsvFilesResponse.repeatedFields_, null);
};
goog.inherits(proto.rover.files.v1.ListCsvFilesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.ListCsvFilesResponse.displayName = 'proto.rover.files.v1.ListCsvFilesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rover.files.v1.ListCsvFilesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.ListCsvFilesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.ListCsvFilesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.ListCsvFilesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.ListCsvFilesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    csvFilesList: jspb.Message.toObjectList(msg.getCsvFilesList(),
    proto.rover.files.v1.CsvFile.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.ListCsvFilesResponse}
 */
proto.rover.files.v1.ListCsvFilesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.ListCsvFilesResponse;
  return proto.rover.files.v1.ListCsvFilesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.ListCsvFilesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.ListCsvFilesResponse}
 */
proto.rover.files.v1.ListCsvFilesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rover.files.v1.CsvFile;
      reader.readMessage(value,proto.rover.files.v1.CsvFile.deserializeBinaryFromReader);
      msg.addCsvFiles(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.ListCsvFilesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.ListCsvFilesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.ListCsvFilesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.ListCsvFilesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsvFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rover.files.v1.CsvFile.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated CsvFile csv_files = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.rover.files.v1.CsvFile>}
 */
proto.rover.files.v1.ListCsvFilesResponse.prototype.getCsvFilesList = function() {
  return /** @type{!Array.<!proto.rover.files.v1.CsvFile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rover.files.v1.CsvFile, 1));
};


/** @param {!Array.<!proto.rover.files.v1.CsvFile>} value */
proto.rover.files.v1.ListCsvFilesResponse.prototype.setCsvFilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rover.files.v1.CsvFile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rover.files.v1.CsvFile}
 */
proto.rover.files.v1.ListCsvFilesResponse.prototype.addCsvFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rover.files.v1.CsvFile, opt_index);
};


proto.rover.files.v1.ListCsvFilesResponse.prototype.clearCsvFilesList = function() {
  this.setCsvFilesList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.rover.files.v1.ListCsvFilesResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rover.files.v1.ListCsvFilesResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.DeleteCsvFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.DeleteCsvFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.DeleteCsvFileRequest.displayName = 'proto.rover.files.v1.DeleteCsvFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.DeleteCsvFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.DeleteCsvFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.DeleteCsvFileRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.DeleteCsvFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && auth_v1_auth_pb.AuthContext.toObject(includeInstance, f),
    csvFileId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.DeleteCsvFileRequest}
 */
proto.rover.files.v1.DeleteCsvFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.DeleteCsvFileRequest;
  return proto.rover.files.v1.DeleteCsvFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.DeleteCsvFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.DeleteCsvFileRequest}
 */
proto.rover.files.v1.DeleteCsvFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new auth_v1_auth_pb.AuthContext;
      reader.readMessage(value,auth_v1_auth_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCsvFileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.DeleteCsvFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.DeleteCsvFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.DeleteCsvFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.DeleteCsvFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      auth_v1_auth_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getCsvFileId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional rover.auth.v1.AuthContext auth_context = 1;
 * @return {?proto.rover.auth.v1.AuthContext}
 */
proto.rover.files.v1.DeleteCsvFileRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.rover.auth.v1.AuthContext} */ (
    jspb.Message.getWrapperField(this, auth_v1_auth_pb.AuthContext, 1));
};


/** @param {?proto.rover.auth.v1.AuthContext|undefined} value */
proto.rover.files.v1.DeleteCsvFileRequest.prototype.setAuthContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.files.v1.DeleteCsvFileRequest.prototype.clearAuthContext = function() {
  this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.DeleteCsvFileRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 csv_file_id = 2;
 * @return {number}
 */
proto.rover.files.v1.DeleteCsvFileRequest.prototype.getCsvFileId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rover.files.v1.DeleteCsvFileRequest.prototype.setCsvFileId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.DeleteCsvFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.DeleteCsvFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.DeleteCsvFileResponse.displayName = 'proto.rover.files.v1.DeleteCsvFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.DeleteCsvFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.DeleteCsvFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.DeleteCsvFileResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.DeleteCsvFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.DeleteCsvFileResponse}
 */
proto.rover.files.v1.DeleteCsvFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.DeleteCsvFileResponse;
  return proto.rover.files.v1.DeleteCsvFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.DeleteCsvFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.DeleteCsvFileResponse}
 */
proto.rover.files.v1.DeleteCsvFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.DeleteCsvFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.DeleteCsvFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.DeleteCsvFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.DeleteCsvFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.ReadCsvFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.ReadCsvFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.ReadCsvFileRequest.displayName = 'proto.rover.files.v1.ReadCsvFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.ReadCsvFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.ReadCsvFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.ReadCsvFileRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.ReadCsvFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && auth_v1_auth_pb.AuthContext.toObject(includeInstance, f),
    csvFileId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.ReadCsvFileRequest}
 */
proto.rover.files.v1.ReadCsvFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.ReadCsvFileRequest;
  return proto.rover.files.v1.ReadCsvFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.ReadCsvFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.ReadCsvFileRequest}
 */
proto.rover.files.v1.ReadCsvFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new auth_v1_auth_pb.AuthContext;
      reader.readMessage(value,auth_v1_auth_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCsvFileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.ReadCsvFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.ReadCsvFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.ReadCsvFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.ReadCsvFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      auth_v1_auth_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getCsvFileId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional rover.auth.v1.AuthContext auth_context = 1;
 * @return {?proto.rover.auth.v1.AuthContext}
 */
proto.rover.files.v1.ReadCsvFileRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.rover.auth.v1.AuthContext} */ (
    jspb.Message.getWrapperField(this, auth_v1_auth_pb.AuthContext, 1));
};


/** @param {?proto.rover.auth.v1.AuthContext|undefined} value */
proto.rover.files.v1.ReadCsvFileRequest.prototype.setAuthContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.files.v1.ReadCsvFileRequest.prototype.clearAuthContext = function() {
  this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.ReadCsvFileRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 csv_file_id = 2;
 * @return {number}
 */
proto.rover.files.v1.ReadCsvFileRequest.prototype.getCsvFileId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rover.files.v1.ReadCsvFileRequest.prototype.setCsvFileId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.ReadCsvFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rover.files.v1.ReadCsvFileResponse.repeatedFields_, null);
};
goog.inherits(proto.rover.files.v1.ReadCsvFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.ReadCsvFileResponse.displayName = 'proto.rover.files.v1.ReadCsvFileResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rover.files.v1.ReadCsvFileResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.ReadCsvFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.ReadCsvFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.ReadCsvFileResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.ReadCsvFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    linesList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.ReadCsvFileResponse}
 */
proto.rover.files.v1.ReadCsvFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.ReadCsvFileResponse;
  return proto.rover.files.v1.ReadCsvFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.ReadCsvFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.ReadCsvFileResponse}
 */
proto.rover.files.v1.ReadCsvFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.ReadCsvFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.ReadCsvFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.ReadCsvFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.ReadCsvFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string lines = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.rover.files.v1.ReadCsvFileResponse.prototype.getLinesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<string>} value */
proto.rover.files.v1.ReadCsvFileResponse.prototype.setLinesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.rover.files.v1.ReadCsvFileResponse.prototype.addLines = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.rover.files.v1.ReadCsvFileResponse.prototype.clearLinesList = function() {
  this.setLinesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.UploadCsvFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rover.files.v1.UploadCsvFileRequest.oneofGroups_);
};
goog.inherits(proto.rover.files.v1.UploadCsvFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.UploadCsvFileRequest.displayName = 'proto.rover.files.v1.UploadCsvFileRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rover.files.v1.UploadCsvFileRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rover.files.v1.UploadCsvFileRequest.ValueCase = {
  VALUE_NOT_SET: 0,
  META: 1,
  CHUNK: 2
};

/**
 * @return {proto.rover.files.v1.UploadCsvFileRequest.ValueCase}
 */
proto.rover.files.v1.UploadCsvFileRequest.prototype.getValueCase = function() {
  return /** @type {proto.rover.files.v1.UploadCsvFileRequest.ValueCase} */(jspb.Message.computeOneofCase(this, proto.rover.files.v1.UploadCsvFileRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.UploadCsvFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.UploadCsvFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.UploadCsvFileRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.UploadCsvFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.rover.files.v1.UploadCsvFileRequest.Meta.toObject(includeInstance, f),
    chunk: (f = msg.getChunk()) && proto.rover.files.v1.UploadCsvFileRequest.Chunk.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.UploadCsvFileRequest}
 */
proto.rover.files.v1.UploadCsvFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.UploadCsvFileRequest;
  return proto.rover.files.v1.UploadCsvFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.UploadCsvFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.UploadCsvFileRequest}
 */
proto.rover.files.v1.UploadCsvFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rover.files.v1.UploadCsvFileRequest.Meta;
      reader.readMessage(value,proto.rover.files.v1.UploadCsvFileRequest.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new proto.rover.files.v1.UploadCsvFileRequest.Chunk;
      reader.readMessage(value,proto.rover.files.v1.UploadCsvFileRequest.Chunk.deserializeBinaryFromReader);
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.UploadCsvFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.UploadCsvFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.UploadCsvFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.UploadCsvFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rover.files.v1.UploadCsvFileRequest.Meta.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rover.files.v1.UploadCsvFileRequest.Chunk.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.UploadCsvFileRequest.Meta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.UploadCsvFileRequest.Meta.displayName = 'proto.rover.files.v1.UploadCsvFileRequest.Meta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.UploadCsvFileRequest.Meta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.UploadCsvFileRequest.Meta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && auth_v1_auth_pb.AuthContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.UploadCsvFileRequest.Meta}
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.UploadCsvFileRequest.Meta;
  return proto.rover.files.v1.UploadCsvFileRequest.Meta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.UploadCsvFileRequest.Meta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.UploadCsvFileRequest.Meta}
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new auth_v1_auth_pb.AuthContext;
      reader.readMessage(value,auth_v1_auth_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.UploadCsvFileRequest.Meta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.UploadCsvFileRequest.Meta} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      auth_v1_auth_pb.AuthContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional rover.auth.v1.AuthContext auth_context = 1;
 * @return {?proto.rover.auth.v1.AuthContext}
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta.prototype.getAuthContext = function() {
  return /** @type{?proto.rover.auth.v1.AuthContext} */ (
    jspb.Message.getWrapperField(this, auth_v1_auth_pb.AuthContext, 1));
};


/** @param {?proto.rover.auth.v1.AuthContext|undefined} value */
proto.rover.files.v1.UploadCsvFileRequest.Meta.prototype.setAuthContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.files.v1.UploadCsvFileRequest.Meta.prototype.clearAuthContext = function() {
  this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.UploadCsvFileRequest.Meta.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.UploadCsvFileRequest.Chunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.UploadCsvFileRequest.Chunk.displayName = 'proto.rover.files.v1.UploadCsvFileRequest.Chunk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.UploadCsvFileRequest.Chunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.UploadCsvFileRequest.Chunk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.UploadCsvFileRequest.Chunk}
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.UploadCsvFileRequest.Chunk;
  return proto.rover.files.v1.UploadCsvFileRequest.Chunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.UploadCsvFileRequest.Chunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.UploadCsvFileRequest.Chunk}
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.UploadCsvFileRequest.Chunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.UploadCsvFileRequest.Chunk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.rover.files.v1.UploadCsvFileRequest.Chunk.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Meta meta = 1;
 * @return {?proto.rover.files.v1.UploadCsvFileRequest.Meta}
 */
proto.rover.files.v1.UploadCsvFileRequest.prototype.getMeta = function() {
  return /** @type{?proto.rover.files.v1.UploadCsvFileRequest.Meta} */ (
    jspb.Message.getWrapperField(this, proto.rover.files.v1.UploadCsvFileRequest.Meta, 1));
};


/** @param {?proto.rover.files.v1.UploadCsvFileRequest.Meta|undefined} value */
proto.rover.files.v1.UploadCsvFileRequest.prototype.setMeta = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.rover.files.v1.UploadCsvFileRequest.oneofGroups_[0], value);
};


proto.rover.files.v1.UploadCsvFileRequest.prototype.clearMeta = function() {
  this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.UploadCsvFileRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Chunk chunk = 2;
 * @return {?proto.rover.files.v1.UploadCsvFileRequest.Chunk}
 */
proto.rover.files.v1.UploadCsvFileRequest.prototype.getChunk = function() {
  return /** @type{?proto.rover.files.v1.UploadCsvFileRequest.Chunk} */ (
    jspb.Message.getWrapperField(this, proto.rover.files.v1.UploadCsvFileRequest.Chunk, 2));
};


/** @param {?proto.rover.files.v1.UploadCsvFileRequest.Chunk|undefined} value */
proto.rover.files.v1.UploadCsvFileRequest.prototype.setChunk = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.rover.files.v1.UploadCsvFileRequest.oneofGroups_[0], value);
};


proto.rover.files.v1.UploadCsvFileRequest.prototype.clearChunk = function() {
  this.setChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.UploadCsvFileRequest.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rover.files.v1.UploadCsvFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rover.files.v1.UploadCsvFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rover.files.v1.UploadCsvFileResponse.displayName = 'proto.rover.files.v1.UploadCsvFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rover.files.v1.UploadCsvFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rover.files.v1.UploadCsvFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rover.files.v1.UploadCsvFileResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rover.files.v1.UploadCsvFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    csvFile: (f = msg.getCsvFile()) && proto.rover.files.v1.CsvFile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rover.files.v1.UploadCsvFileResponse}
 */
proto.rover.files.v1.UploadCsvFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rover.files.v1.UploadCsvFileResponse;
  return proto.rover.files.v1.UploadCsvFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rover.files.v1.UploadCsvFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rover.files.v1.UploadCsvFileResponse}
 */
proto.rover.files.v1.UploadCsvFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rover.files.v1.CsvFile;
      reader.readMessage(value,proto.rover.files.v1.CsvFile.deserializeBinaryFromReader);
      msg.setCsvFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rover.files.v1.UploadCsvFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rover.files.v1.UploadCsvFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rover.files.v1.UploadCsvFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rover.files.v1.UploadCsvFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsvFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rover.files.v1.CsvFile.serializeBinaryToWriter
    );
  }
};


/**
 * optional CsvFile csv_file = 1;
 * @return {?proto.rover.files.v1.CsvFile}
 */
proto.rover.files.v1.UploadCsvFileResponse.prototype.getCsvFile = function() {
  return /** @type{?proto.rover.files.v1.CsvFile} */ (
    jspb.Message.getWrapperField(this, proto.rover.files.v1.CsvFile, 1));
};


/** @param {?proto.rover.files.v1.CsvFile|undefined} value */
proto.rover.files.v1.UploadCsvFileResponse.prototype.setCsvFile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rover.files.v1.UploadCsvFileResponse.prototype.clearCsvFile = function() {
  this.setCsvFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rover.files.v1.UploadCsvFileResponse.prototype.hasCsvFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.rover.files.v1);

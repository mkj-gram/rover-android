// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth/v1/auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth/v1/auth.proto

It has these top-level messages:
	Empty
	Token
	Account
	User
	UserSession
	GetAccountRequest
	CreateAccountRequest
	UpdateAccountRequest
	ListTokensRequest
	ListTokensResponse
	GetUserInfoRequest
	GetUserInfoResponse
	GetUserRequest
	CreateUserRequest
	UpdateUserRequest
	UpdateUserPasswordRequest
	CreateUserSessionRequest
	AuthenticateRequest
	AuthContext
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/roverplatform/rover/go/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// No response
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Token struct {
	// account the token belongs to
	AccountId int32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// token key
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// list of scopes
	// by default every account gets 3 special tokens pregenerated
	// with scopes equal to: web, sdk, server
	PermissionScopes []string                   `protobuf:"bytes,3,rep,name=permission_scopes,json=permissionScopes" json:"permission_scopes,omitempty"`
	UpdatedAt        *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	CreatedAt        *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Token) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Token) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Token) GetPermissionScopes() []string {
	if m != nil {
		return m.PermissionScopes
	}
	return nil
}

func (m *Token) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Token) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

//
// Account represents customer account in the system
type Account struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The name of the account.
	// For example AirMiles
	Name      string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Account) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Account) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

//
// User represents a person that accesses the rover.io and acts on behalf of a customer account
type User struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// the Account.id user belongs to
	AccountId int32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// The name of the user example Jacob
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Must be unique accross all users
	Email            string                     `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	PermissionScopes []string                   `protobuf:"bytes,6,rep,name=permission_scopes,json=permissionScopes" json:"permission_scopes,omitempty"`
	UpdatedAt        *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	CreatedAt        *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPermissionScopes() []string {
	if m != nil {
		return m.PermissionScopes
	}
	return nil
}

func (m *User) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *User) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

//
// UserSession represents a rover.io user session.
type UserSession struct {
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// session key
	Key string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// last seen IP address
	LastSeen_IP string                     `protobuf:"bytes,4,opt,name=last_seen_IP,json=lastSeenIP" json:"last_seen_IP,omitempty"`
	ExpiresAt   *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
	CreatedAt   *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// used as last_seen at timestamp
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *UserSession) Reset()                    { *m = UserSession{} }
func (m *UserSession) String() string            { return proto.CompactTextString(m) }
func (*UserSession) ProtoMessage()               {}
func (*UserSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserSession) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserSession) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UserSession) GetLastSeen_IP() string {
	if m != nil {
		return m.LastSeen_IP
	}
	return ""
}

func (m *UserSession) GetExpiresAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *UserSession) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *UserSession) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type GetAccountRequest struct {
	// The account id
	AccountId int32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *GetAccountRequest) Reset()                    { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()               {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetAccountRequest) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type CreateAccountRequest struct {
	// The name of the account
	// All other attributes are auto generated
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateAccountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateAccountRequest struct {
	AccountId int32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UpdateAccountRequest) Reset()                    { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()               {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateAccountRequest) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *UpdateAccountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListTokensRequest struct {
	AccountId int32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *ListTokensRequest) Reset()                    { *m = ListTokensRequest{} }
func (m *ListTokensRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTokensRequest) ProtoMessage()               {}
func (*ListTokensRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListTokensRequest) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type ListTokensResponse struct {
	Tokens []*Token `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *ListTokensResponse) Reset()                    { *m = ListTokensResponse{} }
func (m *ListTokensResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTokensResponse) ProtoMessage()               {}
func (*ListTokensResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListTokensResponse) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type GetUserInfoRequest struct {
	AuthContext *AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
}

func (m *GetUserInfoRequest) Reset()                    { *m = GetUserInfoRequest{} }
func (m *GetUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoRequest) ProtoMessage()               {}
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetUserInfoRequest) GetAuthContext() *AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

type GetUserInfoResponse struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *GetUserInfoResponse) Reset()                    { *m = GetUserInfoResponse{} }
func (m *GetUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResponse) ProtoMessage()               {}
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetUserInfoResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *GetUserInfoResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserRequest struct {
	AccountId int32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetUserRequest) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *GetUserRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CreateUserRequest struct {
	AccountId int32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Password  string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateUserRequest) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CreateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UpdateUserRequest struct {
	AccountId int32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId    int32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Email     string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UpdateUserRequest) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *UpdateUserRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UpdateUserPasswordRequest struct {
	AccountId int32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId    int32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Password  string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *UpdateUserPasswordRequest) Reset()                    { *m = UpdateUserPasswordRequest{} }
func (m *UpdateUserPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserPasswordRequest) ProtoMessage()               {}
func (*UpdateUserPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateUserPasswordRequest) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *UpdateUserPasswordRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserPasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateUserSessionRequest struct {
	Email       string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	LastSeen_IP string `protobuf:"bytes,3,opt,name=last_seen_IP,json=lastSeenIP" json:"last_seen_IP,omitempty"`
}

func (m *CreateUserSessionRequest) Reset()                    { *m = CreateUserSessionRequest{} }
func (m *CreateUserSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserSessionRequest) ProtoMessage()               {}
func (*CreateUserSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CreateUserSessionRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserSessionRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateUserSessionRequest) GetLastSeen_IP() string {
	if m != nil {
		return m.LastSeen_IP
	}
	return ""
}

type AuthenticateRequest struct {
	// one of the: token key or session key
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// last seen ip
	LastSeen_IP string `protobuf:"bytes,2,opt,name=last_seen_IP,json=lastSeenIP" json:"last_seen_IP,omitempty"`
}

func (m *AuthenticateRequest) Reset()                    { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()               {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AuthenticateRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AuthenticateRequest) GetLastSeen_IP() string {
	if m != nil {
		return m.LastSeen_IP
	}
	return ""
}

// Authentication context auth reploy
type AuthContext struct {
	// the Account.id the context is bound to
	AccountId int32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// the User.id the context is bound to
	// optional
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// string tokens the context is bound to
	PermissionScopes []string `protobuf:"bytes,3,rep,name=permission_scopes,json=permissionScopes" json:"permission_scopes,omitempty"`
}

func (m *AuthContext) Reset()                    { *m = AuthContext{} }
func (m *AuthContext) String() string            { return proto.CompactTextString(m) }
func (*AuthContext) ProtoMessage()               {}
func (*AuthContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AuthContext) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *AuthContext) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthContext) GetPermissionScopes() []string {
	if m != nil {
		return m.PermissionScopes
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "rover.auth.v1.Empty")
	proto.RegisterType((*Token)(nil), "rover.auth.v1.Token")
	proto.RegisterType((*Account)(nil), "rover.auth.v1.Account")
	proto.RegisterType((*User)(nil), "rover.auth.v1.User")
	proto.RegisterType((*UserSession)(nil), "rover.auth.v1.UserSession")
	proto.RegisterType((*GetAccountRequest)(nil), "rover.auth.v1.GetAccountRequest")
	proto.RegisterType((*CreateAccountRequest)(nil), "rover.auth.v1.CreateAccountRequest")
	proto.RegisterType((*UpdateAccountRequest)(nil), "rover.auth.v1.UpdateAccountRequest")
	proto.RegisterType((*ListTokensRequest)(nil), "rover.auth.v1.ListTokensRequest")
	proto.RegisterType((*ListTokensResponse)(nil), "rover.auth.v1.ListTokensResponse")
	proto.RegisterType((*GetUserInfoRequest)(nil), "rover.auth.v1.GetUserInfoRequest")
	proto.RegisterType((*GetUserInfoResponse)(nil), "rover.auth.v1.GetUserInfoResponse")
	proto.RegisterType((*GetUserRequest)(nil), "rover.auth.v1.GetUserRequest")
	proto.RegisterType((*CreateUserRequest)(nil), "rover.auth.v1.CreateUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "rover.auth.v1.UpdateUserRequest")
	proto.RegisterType((*UpdateUserPasswordRequest)(nil), "rover.auth.v1.UpdateUserPasswordRequest")
	proto.RegisterType((*CreateUserSessionRequest)(nil), "rover.auth.v1.CreateUserSessionRequest")
	proto.RegisterType((*AuthenticateRequest)(nil), "rover.auth.v1.AuthenticateRequest")
	proto.RegisterType((*AuthContext)(nil), "rover.auth.v1.AuthContext")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	//
	// Basic CRUD operations for Accounts
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error)
	//
	// Basic CRUD operations for Users
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	//
	// A user session is simple sign on using email & password based authentication to generate a new session token
	CreateUserSession(ctx context.Context, in *CreateUserSessionRequest, opts ...grpc.CallOption) (*UserSession, error)
	//
	// Checks whether the supplied token/user_session is valid
	AuthenticateToken(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthContext, error)
	AuthenticateUserSession(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthContext, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error) {
	out := new(ListTokensResponse)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/ListTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateUserSession(ctx context.Context, in *CreateUserSessionRequest, opts ...grpc.CallOption) (*UserSession, error) {
	out := new(UserSession)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/CreateUserSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthenticateToken(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthContext, error) {
	out := new(AuthContext)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/AuthenticateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthenticateUserSession(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthContext, error) {
	out := new(AuthContext)
	err := grpc.Invoke(ctx, "/rover.auth.v1.Auth/AuthenticateUserSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	//
	// Basic CRUD operations for Accounts
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error)
	//
	// Basic CRUD operations for Users
	GetUser(context.Context, *GetUserRequest) (*User, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*Empty, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	//
	// A user session is simple sign on using email & password based authentication to generate a new session token
	CreateUserSession(context.Context, *CreateUserSessionRequest) (*UserSession, error)
	//
	// Checks whether the supplied token/user_session is valid
	AuthenticateToken(context.Context, *AuthenticateRequest) (*AuthContext, error)
	AuthenticateUserSession(context.Context, *AuthenticateRequest) (*AuthContext, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/ListTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ListTokens(ctx, req.(*ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/CreateUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateUserSession(ctx, req.(*CreateUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthenticateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthenticateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/AuthenticateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthenticateToken(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthenticateUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthenticateUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.auth.v1.Auth/AuthenticateUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthenticateUserSession(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rover.auth.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Auth_GetAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Auth_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Auth_UpdateAccount_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _Auth_ListTokens_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Auth_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Auth_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Auth_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Auth_UpdateUserPassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Auth_GetUserInfo_Handler,
		},
		{
			MethodName: "CreateUserSession",
			Handler:    _Auth_CreateUserSession_Handler,
		},
		{
			MethodName: "AuthenticateToken",
			Handler:    _Auth_AuthenticateToken_Handler,
		},
		{
			MethodName: "AuthenticateUserSession",
			Handler:    _Auth_AuthenticateUserSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/v1/auth.proto",
}

func init() { proto.RegisterFile("auth/v1/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0xdf, 0xc4, 0x49, 0x4c, 0x5e, 0x00, 0x91, 0x21, 0x5a, 0xb2, 0x96, 0xd0, 0x86, 0xd9, 0x03,
	0x68, 0x77, 0x95, 0x2c, 0xd9, 0xd3, 0x6a, 0xb5, 0x5a, 0x05, 0x84, 0x4a, 0xa4, 0xaa, 0x42, 0x0e,
	0xf4, 0x40, 0x0f, 0x91, 0x49, 0x06, 0x6a, 0x41, 0x6c, 0xd7, 0x33, 0xa1, 0x70, 0xed, 0xb5, 0x1f,
	0xa3, 0x5f, 0xa9, 0xb7, 0x7e, 0x99, 0xce, 0x8c, 0xc7, 0xf1, 0xdf, 0x84, 0x04, 0x7a, 0xb2, 0x67,
	0xfc, 0xe6, 0xf7, 0x7e, 0xef, 0xcd, 0x7b, 0xbf, 0x19, 0x03, 0xb2, 0xa6, 0xec, 0x7d, 0xe7, 0xfe,
	0xb0, 0x23, 0x9e, 0x6d, 0xcf, 0x77, 0x99, 0x8b, 0x36, 0x7c, 0xf7, 0x9e, 0xf8, 0x6d, 0x39, 0x73,
	0x7f, 0x68, 0xfc, 0x7a, 0xe3, 0xba, 0x37, 0x77, 0xa4, 0x23, 0x3f, 0x5e, 0x4d, 0xaf, 0x3b, 0xcc,
	0x9e, 0x10, 0xca, 0xac, 0x89, 0x17, 0xd8, 0x63, 0x1d, 0xca, 0x27, 0x13, 0x8f, 0x3d, 0xe2, 0x6f,
	0x05, 0x28, 0x9f, 0xbb, 0xb7, 0xc4, 0x41, 0xbb, 0x00, 0xd6, 0x68, 0xe4, 0x4e, 0x1d, 0x36, 0xb4,
	0xc7, 0xcd, 0x42, 0xab, 0x70, 0x50, 0x36, 0xab, 0x6a, 0xa6, 0x3f, 0x46, 0x5b, 0xa0, 0xdd, 0x92,
	0xc7, 0x66, 0x91, 0xcf, 0x57, 0x4d, 0xf1, 0x8a, 0xfe, 0x80, 0xba, 0x47, 0xfc, 0x89, 0x4d, 0xa9,
	0xed, 0x3a, 0x43, 0x3a, 0x72, 0x3d, 0x42, 0x9b, 0x5a, 0x4b, 0xe3, 0xdf, 0xb7, 0xa2, 0x0f, 0x03,
	0x39, 0x8f, 0xfe, 0x01, 0x98, 0x7a, 0x63, 0x8b, 0x91, 0xf1, 0xd0, 0x62, 0xcd, 0x0a, 0x47, 0xa9,
	0x75, 0x8d, 0x76, 0x40, 0xb3, 0x1d, 0xd2, 0x6c, 0x9f, 0x87, 0x34, 0xcd, 0xaa, 0xb2, 0xee, 0x31,
	0xb1, 0x74, 0xe4, 0x93, 0x70, 0xa9, 0xfe, 0xf4, 0x52, 0x65, 0xdd, 0x63, 0xf8, 0x4b, 0x01, 0xf4,
	0x5e, 0x10, 0x02, 0xda, 0x84, 0xe2, 0x2c, 0x2e, 0xfe, 0x86, 0x10, 0x94, 0x1c, 0x6b, 0x42, 0x54,
	0x44, 0xf2, 0x3d, 0xc5, 0x52, 0x7b, 0x3e, 0xcb, 0xd2, 0x2a, 0x2c, 0x3f, 0x15, 0xa1, 0x74, 0x41,
	0x89, 0x9f, 0xa1, 0x98, 0xdc, 0x92, 0x62, 0x7a, 0x4b, 0xc2, 0x08, 0xb4, 0x58, 0x04, 0x0d, 0x28,
	0x93, 0x89, 0x65, 0xdf, 0x49, 0x06, 0x55, 0x33, 0x18, 0xe4, 0x6f, 0x55, 0x65, 0xa9, 0xad, 0xd2,
	0x9f, 0x9f, 0x84, 0xb5, 0x55, 0x92, 0xf0, 0xb9, 0x08, 0x35, 0x91, 0x84, 0x01, 0x91, 0x5c, 0xd0,
	0x0e, 0xe8, 0x53, 0x3e, 0x8c, 0x02, 0xaf, 0x88, 0x61, 0x54, 0x88, 0x5a, 0x54, 0x88, 0x2d, 0x58,
	0xbf, 0xb3, 0x28, 0x1b, 0x52, 0x42, 0x9c, 0x61, 0xff, 0x4c, 0x85, 0x0e, 0x62, 0x6e, 0xc0, 0xa7,
	0xfa, 0x67, 0x82, 0x17, 0x79, 0xf0, 0x6c, 0x9f, 0x50, 0xc1, 0xab, 0xfc, 0x34, 0x2f, 0x65, 0x9d,
	0x09, 0xa9, 0xb2, 0x42, 0x48, 0x2f, 0x48, 0x24, 0xee, 0x42, 0xfd, 0x15, 0x61, 0xaa, 0x74, 0x4d,
	0xf2, 0x61, 0xca, 0x4d, 0x9e, 0xe8, 0x50, 0xfc, 0x3b, 0x34, 0x8e, 0xa5, 0xef, 0xd4, 0xb2, 0xb0,
	0x4c, 0x0a, 0x51, 0x99, 0xe0, 0x3e, 0x34, 0x2e, 0xa4, 0xb3, 0x95, 0x5c, 0xe4, 0xf5, 0x8c, 0xa0,
	0xfa, 0xda, 0xa6, 0x4c, 0x8a, 0x08, 0x5d, 0x92, 0xea, 0x11, 0xa0, 0xf8, 0x1a, 0xea, 0xb9, 0x0e,
	0x25, 0xe8, 0x4f, 0xa8, 0x30, 0x39, 0xc3, 0x17, 0x68, 0x3c, 0x57, 0x8d, 0x76, 0x42, 0xd5, 0xda,
	0xd2, 0xdc, 0x54, 0x36, 0x78, 0x00, 0x88, 0xa7, 0x48, 0x94, 0x4c, 0xdf, 0xb9, 0x76, 0x43, 0xc7,
	0xff, 0xc1, 0xba, 0x30, 0x1f, 0x8e, 0x5c, 0x87, 0x91, 0x07, 0x26, 0x5d, 0x8b, 0xac, 0x27, 0x91,
	0x7a, 0xfc, 0x79, 0x1c, 0x58, 0x98, 0x35, 0x2b, 0x1a, 0x60, 0x0f, 0xb6, 0x13, 0xa0, 0x8a, 0xd9,
	0x5f, 0xa0, 0x2b, 0xf2, 0x0a, 0xf0, 0xe7, 0x34, 0xa0, 0x4a, 0x63, 0x68, 0x86, 0xf6, 0xa1, 0x24,
	0xea, 0x55, 0x66, 0xaa, 0xd6, 0xdd, 0x4e, 0x99, 0x0b, 0x07, 0xa6, 0x34, 0xc0, 0xa7, 0xb0, 0xa9,
	0x3c, 0x2e, 0xb9, 0x07, 0xf3, 0x1a, 0x03, 0x3f, 0x40, 0x3d, 0xd8, 0xff, 0x15, 0xc0, 0xf2, 0x44,
	0x70, 0x26, 0x21, 0x5a, 0x5c, 0x42, 0x0c, 0x58, 0xf3, 0x2c, 0x4a, 0x3f, 0xba, 0xfe, 0x58, 0x35,
	0xd8, 0x6c, 0x8c, 0xa7, 0x50, 0x0f, 0xaa, 0xe9, 0x07, 0x84, 0xb1, 0xbc, 0xaa, 0x61, 0x17, 0x7e,
	0x89, 0xdc, 0x9e, 0x29, 0x32, 0x2f, 0x75, 0x1f, 0x8f, 0x53, 0x4b, 0xc5, 0xe9, 0x40, 0x33, 0xca,
	0xb0, 0x12, 0xaa, 0xd0, 0xdf, 0x8c, 0x62, 0x61, 0x5e, 0xd6, 0x8a, 0x49, 0xb4, 0x8c, 0x6c, 0x69,
	0x69, 0xd9, 0xe2, 0x5d, 0xba, 0x2d, 0x2a, 0x95, 0x38, 0xcc, 0x1e, 0x71, 0xaf, 0xa1, 0x2b, 0xa5,
	0x80, 0x85, 0xf9, 0x0a, 0x58, 0xcc, 0x40, 0xf9, 0x50, 0x8b, 0x15, 0xfd, 0xb3, 0xb3, 0xb3, 0xca,
	0x99, 0xdf, 0xfd, 0xaa, 0x43, 0x49, 0x38, 0x45, 0xa7, 0x00, 0x91, 0x9a, 0xa1, 0x56, 0xaa, 0x19,
	0x32, 0x42, 0x67, 0xcc, 0xe9, 0x2e, 0xfc, 0x13, 0x7a, 0x03, 0x1b, 0x09, 0x8d, 0x43, 0xbf, 0xa5,
	0x4c, 0xf3, 0x14, 0x70, 0x31, 0x5e, 0x42, 0x07, 0x33, 0x78, 0x79, 0x2a, 0xb9, 0x00, 0x6f, 0x00,
	0x10, 0x09, 0x5b, 0x26, 0xd2, 0x8c, 0x4e, 0x1a, 0x7b, 0x0b, 0x2c, 0x02, 0xed, 0xe1, 0xa0, 0xff,
	0x83, 0xae, 0x24, 0x02, 0xed, 0x66, 0x73, 0x17, 0xeb, 0x39, 0x23, 0x4f, 0x67, 0x38, 0xc0, 0x09,
	0x40, 0x54, 0xb7, 0x19, 0x56, 0x19, 0xd1, 0x58, 0x00, 0x13, 0xf5, 0x5b, 0x06, 0x26, 0xa3, 0x00,
	0xf3, 0x60, 0xde, 0x02, 0xca, 0xb6, 0x2d, 0x3a, 0x98, 0x0b, 0x97, 0xea, 0x6c, 0x23, 0x7d, 0x2c,
	0x04, 0x17, 0x59, 0x81, 0x5b, 0x8b, 0x69, 0x37, 0xda, 0xcb, 0x4f, 0x55, 0xec, 0xb0, 0x30, 0xf0,
	0x22, 0x93, 0x59, 0xfa, 0x2f, 0xe3, 0xba, 0x1a, 0x5e, 0x4f, 0xf6, 0xe7, 0x26, 0x31, 0xa9, 0x0b,
	0x86, 0x91, 0x93, 0x04, 0x65, 0xc2, 0xb1, 0x2f, 0xa0, 0x1e, 0xef, 0xf0, 0xe0, 0x26, 0x8e, 0x73,
	0x4e, 0xab, 0x94, 0x06, 0x18, 0x0b, 0x4e, 0x34, 0x0e, 0xfb, 0x0e, 0x76, 0xe2, 0x8b, 0xe2, 0xc4,
	0x5f, 0x0c, 0x7e, 0xb4, 0x79, 0xb9, 0xae, 0xfe, 0x40, 0xfe, 0x15, 0xcf, 0xab, 0x8a, 0xbc, 0xca,
	0xfc, 0xfd, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x04, 0x29, 0x69, 0xba, 0x98, 0x0c, 0x00, 0x00,
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/roverplatform/rover/apis/go/campaigns/v1 (interfaces: CampaignsClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/roverplatform/rover/apis/go/campaigns/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCampaignsClient is a mock of CampaignsClient interface
type MockCampaignsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignsClientMockRecorder
}

// MockCampaignsClientMockRecorder is the mock recorder for MockCampaignsClient
type MockCampaignsClientMockRecorder struct {
	mock *MockCampaignsClient
}

// NewMockCampaignsClient creates a new mock instance
func NewMockCampaignsClient(ctrl *gomock.Controller) *MockCampaignsClient {
	mock := &MockCampaignsClient{ctrl: ctrl}
	mock.recorder = &MockCampaignsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCampaignsClient) EXPECT() *MockCampaignsClientMockRecorder {
	return m.recorder
}

// Archive mocks base method
func (m *MockCampaignsClient) Archive(arg0 context.Context, arg1 *v1.ArchiveRequest, arg2 ...grpc.CallOption) (*v1.ArchiveResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Archive", varargs...)
	ret0, _ := ret[0].(*v1.ArchiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Archive indicates an expected call of Archive
func (mr *MockCampaignsClientMockRecorder) Archive(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockCampaignsClient)(nil).Archive), varargs...)
}

// Create mocks base method
func (m *MockCampaignsClient) Create(arg0 context.Context, arg1 *v1.CreateRequest, arg2 ...grpc.CallOption) (*v1.CreateResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCampaignsClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCampaignsClient)(nil).Create), varargs...)
}

// Duplicate mocks base method
func (m *MockCampaignsClient) Duplicate(arg0 context.Context, arg1 *v1.DuplicateRequest, arg2 ...grpc.CallOption) (*v1.DuplicateResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Duplicate", varargs...)
	ret0, _ := ret[0].(*v1.DuplicateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Duplicate indicates an expected call of Duplicate
func (mr *MockCampaignsClientMockRecorder) Duplicate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duplicate", reflect.TypeOf((*MockCampaignsClient)(nil).Duplicate), varargs...)
}

// Get mocks base method
func (m *MockCampaignsClient) Get(arg0 context.Context, arg1 *v1.GetRequest, arg2 ...grpc.CallOption) (*v1.GetResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCampaignsClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCampaignsClient)(nil).Get), varargs...)
}

// List mocks base method
func (m *MockCampaignsClient) List(arg0 context.Context, arg1 *v1.ListRequest, arg2 ...grpc.CallOption) (*v1.ListResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCampaignsClientMockRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCampaignsClient)(nil).List), varargs...)
}

// Publish mocks base method
func (m *MockCampaignsClient) Publish(arg0 context.Context, arg1 *v1.PublishRequest, arg2 ...grpc.CallOption) (*v1.PublishResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*v1.PublishResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockCampaignsClientMockRecorder) Publish(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockCampaignsClient)(nil).Publish), varargs...)
}

// Rename mocks base method
func (m *MockCampaignsClient) Rename(arg0 context.Context, arg1 *v1.RenameRequest, arg2 ...grpc.CallOption) (*v1.RenameResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Rename", varargs...)
	ret0, _ := ret[0].(*v1.RenameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename indicates an expected call of Rename
func (mr *MockCampaignsClientMockRecorder) Rename(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockCampaignsClient)(nil).Rename), varargs...)
}

// SendTest mocks base method
func (m *MockCampaignsClient) SendTest(arg0 context.Context, arg1 *v1.SendTestRequest, arg2 ...grpc.CallOption) (*v1.SendTestResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendTest", varargs...)
	ret0, _ := ret[0].(*v1.SendTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTest indicates an expected call of SendTest
func (mr *MockCampaignsClientMockRecorder) SendTest(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTest", reflect.TypeOf((*MockCampaignsClient)(nil).SendTest), varargs...)
}

// UpdateAutomatedDeliverySettings mocks base method
func (m *MockCampaignsClient) UpdateAutomatedDeliverySettings(arg0 context.Context, arg1 *v1.UpdateAutomatedDeliverySettingsRequest, arg2 ...grpc.CallOption) (*v1.UpdateAutomatedDeliverySettingsResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAutomatedDeliverySettings", varargs...)
	ret0, _ := ret[0].(*v1.UpdateAutomatedDeliverySettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAutomatedDeliverySettings indicates an expected call of UpdateAutomatedDeliverySettings
func (mr *MockCampaignsClientMockRecorder) UpdateAutomatedDeliverySettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutomatedDeliverySettings", reflect.TypeOf((*MockCampaignsClient)(nil).UpdateAutomatedDeliverySettings), varargs...)
}

// UpdateNotificationSettings mocks base method
func (m *MockCampaignsClient) UpdateNotificationSettings(arg0 context.Context, arg1 *v1.UpdateNotificationSettingsRequest, arg2 ...grpc.CallOption) (*v1.UpdateNotificationSettingsResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNotificationSettings", varargs...)
	ret0, _ := ret[0].(*v1.UpdateNotificationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotificationSettings indicates an expected call of UpdateNotificationSettings
func (mr *MockCampaignsClientMockRecorder) UpdateNotificationSettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationSettings", reflect.TypeOf((*MockCampaignsClient)(nil).UpdateNotificationSettings), varargs...)
}

// UpdateScheduledDeliverySettings mocks base method
func (m *MockCampaignsClient) UpdateScheduledDeliverySettings(arg0 context.Context, arg1 *v1.UpdateScheduledDeliverySettingsRequest, arg2 ...grpc.CallOption) (*v1.UpdateScheduledDeliverySettingsResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateScheduledDeliverySettings", varargs...)
	ret0, _ := ret[0].(*v1.UpdateScheduledDeliverySettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScheduledDeliverySettings indicates an expected call of UpdateScheduledDeliverySettings
func (mr *MockCampaignsClientMockRecorder) UpdateScheduledDeliverySettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledDeliverySettings", reflect.TypeOf((*MockCampaignsClient)(nil).UpdateScheduledDeliverySettings), varargs...)
}

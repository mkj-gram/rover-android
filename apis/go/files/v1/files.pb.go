// Code generated by protoc-gen-go. DO NOT EDIT.
// source: files/v1/files.proto

/*
Package files is a generated protocol buffer package.

It is generated from these files:
	files/v1/files.proto

It has these top-level messages:
	CsvFile
	GetCsvFileRequest
	GetCsvFileResponse
	ListCsvFilesRequest
	ListCsvFilesResponse
	DeleteCsvFileRequest
	DeleteCsvFileResponse
	ReadCsvFileRequest
	ReadCsvFileResponse
	UploadCsvFileRequest
	UploadCsvFileResponse
*/
package files

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/roverplatform/rover/go/protobuf/ptypes/timestamp"
import rover_auth_v1 "github.com/roverplatform/rover/apis/go/auth/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CsvFile struct {
	Id         int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AccountId  int32                      `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Filename   string                     `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	NumRows    int32                      `protobuf:"zigzag32,4,opt,name=num_rows,json=numRows" json:"num_rows,omitempty"`
	NumColumns int32                      `protobuf:"zigzag32,5,opt,name=num_columns,json=numColumns" json:"num_columns,omitempty"`
	FileSize   int64                      `protobuf:"zigzag64,6,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Samples    []*CsvFile_Sample          `protobuf:"bytes,7,rep,name=samples" json:"samples,omitempty"`
	CreatedAt  *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *CsvFile) Reset()                    { *m = CsvFile{} }
func (m *CsvFile) String() string            { return proto.CompactTextString(m) }
func (*CsvFile) ProtoMessage()               {}
func (*CsvFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CsvFile) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CsvFile) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CsvFile) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *CsvFile) GetNumRows() int32 {
	if m != nil {
		return m.NumRows
	}
	return 0
}

func (m *CsvFile) GetNumColumns() int32 {
	if m != nil {
		return m.NumColumns
	}
	return 0
}

func (m *CsvFile) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *CsvFile) GetSamples() []*CsvFile_Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *CsvFile) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

// Subtype to allow for representation of 2D arrays
type CsvFile_Sample struct {
	Data []string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *CsvFile_Sample) Reset()                    { *m = CsvFile_Sample{} }
func (m *CsvFile_Sample) String() string            { return proto.CompactTextString(m) }
func (*CsvFile_Sample) ProtoMessage()               {}
func (*CsvFile_Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *CsvFile_Sample) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetCsvFileRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	CsvFileId   int32                      `protobuf:"varint,2,opt,name=csv_file_id,json=csvFileId" json:"csv_file_id,omitempty"`
}

func (m *GetCsvFileRequest) Reset()                    { *m = GetCsvFileRequest{} }
func (m *GetCsvFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCsvFileRequest) ProtoMessage()               {}
func (*GetCsvFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetCsvFileRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *GetCsvFileRequest) GetCsvFileId() int32 {
	if m != nil {
		return m.CsvFileId
	}
	return 0
}

type GetCsvFileResponse struct {
	CsvFile *CsvFile `protobuf:"bytes,1,opt,name=csv_file,json=csvFile" json:"csv_file,omitempty"`
}

func (m *GetCsvFileResponse) Reset()                    { *m = GetCsvFileResponse{} }
func (m *GetCsvFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCsvFileResponse) ProtoMessage()               {}
func (*GetCsvFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetCsvFileResponse) GetCsvFile() *CsvFile {
	if m != nil {
		return m.CsvFile
	}
	return nil
}

type ListCsvFilesRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	OrderBy     string                     `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	PageSize    int32                      `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	PageToken   string                     `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (m *ListCsvFilesRequest) Reset()                    { *m = ListCsvFilesRequest{} }
func (m *ListCsvFilesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCsvFilesRequest) ProtoMessage()               {}
func (*ListCsvFilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListCsvFilesRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *ListCsvFilesRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *ListCsvFilesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListCsvFilesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListCsvFilesResponse struct {
	CsvFiles      []*CsvFile `protobuf:"bytes,1,rep,name=csv_files,json=csvFiles" json:"csv_files,omitempty"`
	NextPageToken string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListCsvFilesResponse) Reset()                    { *m = ListCsvFilesResponse{} }
func (m *ListCsvFilesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListCsvFilesResponse) ProtoMessage()               {}
func (*ListCsvFilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListCsvFilesResponse) GetCsvFiles() []*CsvFile {
	if m != nil {
		return m.CsvFiles
	}
	return nil
}

func (m *ListCsvFilesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteCsvFileRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	CsvFileId   int32                      `protobuf:"varint,2,opt,name=csv_file_id,json=csvFileId" json:"csv_file_id,omitempty"`
}

func (m *DeleteCsvFileRequest) Reset()                    { *m = DeleteCsvFileRequest{} }
func (m *DeleteCsvFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCsvFileRequest) ProtoMessage()               {}
func (*DeleteCsvFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteCsvFileRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *DeleteCsvFileRequest) GetCsvFileId() int32 {
	if m != nil {
		return m.CsvFileId
	}
	return 0
}

type DeleteCsvFileResponse struct {
}

func (m *DeleteCsvFileResponse) Reset()                    { *m = DeleteCsvFileResponse{} }
func (m *DeleteCsvFileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCsvFileResponse) ProtoMessage()               {}
func (*DeleteCsvFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ReadCsvFileRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	CsvFileId   int32                      `protobuf:"varint,2,opt,name=csv_file_id,json=csvFileId" json:"csv_file_id,omitempty"`
}

func (m *ReadCsvFileRequest) Reset()                    { *m = ReadCsvFileRequest{} }
func (m *ReadCsvFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadCsvFileRequest) ProtoMessage()               {}
func (*ReadCsvFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadCsvFileRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *ReadCsvFileRequest) GetCsvFileId() int32 {
	if m != nil {
		return m.CsvFileId
	}
	return 0
}

type ReadCsvFileResponse struct {
	// Line represents a single csv line
	Lines []string `protobuf:"bytes,1,rep,name=lines" json:"lines,omitempty"`
}

func (m *ReadCsvFileResponse) Reset()                    { *m = ReadCsvFileResponse{} }
func (m *ReadCsvFileResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadCsvFileResponse) ProtoMessage()               {}
func (*ReadCsvFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadCsvFileResponse) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

type UploadCsvFileRequest struct {
	// Types that are valid to be assigned to Value:
	//	*UploadCsvFileRequest_Meta_
	//	*UploadCsvFileRequest_Chunk_
	Value isUploadCsvFileRequest_Value `protobuf_oneof:"value"`
}

func (m *UploadCsvFileRequest) Reset()                    { *m = UploadCsvFileRequest{} }
func (m *UploadCsvFileRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadCsvFileRequest) ProtoMessage()               {}
func (*UploadCsvFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isUploadCsvFileRequest_Value interface {
	isUploadCsvFileRequest_Value()
}

type UploadCsvFileRequest_Meta_ struct {
	Meta *UploadCsvFileRequest_Meta `protobuf:"bytes,1,opt,name=meta,oneof"`
}
type UploadCsvFileRequest_Chunk_ struct {
	Chunk *UploadCsvFileRequest_Chunk `protobuf:"bytes,2,opt,name=chunk,oneof"`
}

func (*UploadCsvFileRequest_Meta_) isUploadCsvFileRequest_Value()  {}
func (*UploadCsvFileRequest_Chunk_) isUploadCsvFileRequest_Value() {}

func (m *UploadCsvFileRequest) GetValue() isUploadCsvFileRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *UploadCsvFileRequest) GetMeta() *UploadCsvFileRequest_Meta {
	if x, ok := m.GetValue().(*UploadCsvFileRequest_Meta_); ok {
		return x.Meta
	}
	return nil
}

func (m *UploadCsvFileRequest) GetChunk() *UploadCsvFileRequest_Chunk {
	if x, ok := m.GetValue().(*UploadCsvFileRequest_Chunk_); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UploadCsvFileRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UploadCsvFileRequest_OneofMarshaler, _UploadCsvFileRequest_OneofUnmarshaler, _UploadCsvFileRequest_OneofSizer, []interface{}{
		(*UploadCsvFileRequest_Meta_)(nil),
		(*UploadCsvFileRequest_Chunk_)(nil),
	}
}

func _UploadCsvFileRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UploadCsvFileRequest)
	// value
	switch x := m.Value.(type) {
	case *UploadCsvFileRequest_Meta_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case *UploadCsvFileRequest_Chunk_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chunk); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UploadCsvFileRequest.Value has unexpected type %T", x)
	}
	return nil
}

func _UploadCsvFileRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UploadCsvFileRequest)
	switch tag {
	case 1: // value.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UploadCsvFileRequest_Meta)
		err := b.DecodeMessage(msg)
		m.Value = &UploadCsvFileRequest_Meta_{msg}
		return true, err
	case 2: // value.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UploadCsvFileRequest_Chunk)
		err := b.DecodeMessage(msg)
		m.Value = &UploadCsvFileRequest_Chunk_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UploadCsvFileRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UploadCsvFileRequest)
	// value
	switch x := m.Value.(type) {
	case *UploadCsvFileRequest_Meta_:
		s := proto.Size(x.Meta)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UploadCsvFileRequest_Chunk_:
		s := proto.Size(x.Chunk)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UploadCsvFileRequest_Meta struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
}

func (m *UploadCsvFileRequest_Meta) Reset()                    { *m = UploadCsvFileRequest_Meta{} }
func (m *UploadCsvFileRequest_Meta) String() string            { return proto.CompactTextString(m) }
func (*UploadCsvFileRequest_Meta) ProtoMessage()               {}
func (*UploadCsvFileRequest_Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *UploadCsvFileRequest_Meta) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

type UploadCsvFileRequest_Chunk struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UploadCsvFileRequest_Chunk) Reset()                    { *m = UploadCsvFileRequest_Chunk{} }
func (m *UploadCsvFileRequest_Chunk) String() string            { return proto.CompactTextString(m) }
func (*UploadCsvFileRequest_Chunk) ProtoMessage()               {}
func (*UploadCsvFileRequest_Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 1} }

func (m *UploadCsvFileRequest_Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UploadCsvFileResponse struct {
	CsvFile *CsvFile `protobuf:"bytes,1,opt,name=csv_file,json=csvFile" json:"csv_file,omitempty"`
}

func (m *UploadCsvFileResponse) Reset()                    { *m = UploadCsvFileResponse{} }
func (m *UploadCsvFileResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadCsvFileResponse) ProtoMessage()               {}
func (*UploadCsvFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UploadCsvFileResponse) GetCsvFile() *CsvFile {
	if m != nil {
		return m.CsvFile
	}
	return nil
}

func init() {
	proto.RegisterType((*CsvFile)(nil), "rover.files.v1.CsvFile")
	proto.RegisterType((*CsvFile_Sample)(nil), "rover.files.v1.CsvFile.Sample")
	proto.RegisterType((*GetCsvFileRequest)(nil), "rover.files.v1.GetCsvFileRequest")
	proto.RegisterType((*GetCsvFileResponse)(nil), "rover.files.v1.GetCsvFileResponse")
	proto.RegisterType((*ListCsvFilesRequest)(nil), "rover.files.v1.ListCsvFilesRequest")
	proto.RegisterType((*ListCsvFilesResponse)(nil), "rover.files.v1.ListCsvFilesResponse")
	proto.RegisterType((*DeleteCsvFileRequest)(nil), "rover.files.v1.DeleteCsvFileRequest")
	proto.RegisterType((*DeleteCsvFileResponse)(nil), "rover.files.v1.DeleteCsvFileResponse")
	proto.RegisterType((*ReadCsvFileRequest)(nil), "rover.files.v1.ReadCsvFileRequest")
	proto.RegisterType((*ReadCsvFileResponse)(nil), "rover.files.v1.ReadCsvFileResponse")
	proto.RegisterType((*UploadCsvFileRequest)(nil), "rover.files.v1.UploadCsvFileRequest")
	proto.RegisterType((*UploadCsvFileRequest_Meta)(nil), "rover.files.v1.UploadCsvFileRequest.Meta")
	proto.RegisterType((*UploadCsvFileRequest_Chunk)(nil), "rover.files.v1.UploadCsvFileRequest.Chunk")
	proto.RegisterType((*UploadCsvFileResponse)(nil), "rover.files.v1.UploadCsvFileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Files service

type FilesClient interface {
	ListCsvFiles(ctx context.Context, in *ListCsvFilesRequest, opts ...grpc.CallOption) (*ListCsvFilesResponse, error)
	GetCsvFile(ctx context.Context, in *GetCsvFileRequest, opts ...grpc.CallOption) (*GetCsvFileResponse, error)
	DeleteCsvFile(ctx context.Context, in *DeleteCsvFileRequest, opts ...grpc.CallOption) (*DeleteCsvFileResponse, error)
	UploadCsvFile(ctx context.Context, opts ...grpc.CallOption) (Files_UploadCsvFileClient, error)
	ReadCsvFile(ctx context.Context, in *ReadCsvFileRequest, opts ...grpc.CallOption) (Files_ReadCsvFileClient, error)
}

type filesClient struct {
	cc *grpc.ClientConn
}

func NewFilesClient(cc *grpc.ClientConn) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) ListCsvFiles(ctx context.Context, in *ListCsvFilesRequest, opts ...grpc.CallOption) (*ListCsvFilesResponse, error) {
	out := new(ListCsvFilesResponse)
	err := grpc.Invoke(ctx, "/rover.files.v1.Files/ListCsvFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetCsvFile(ctx context.Context, in *GetCsvFileRequest, opts ...grpc.CallOption) (*GetCsvFileResponse, error) {
	out := new(GetCsvFileResponse)
	err := grpc.Invoke(ctx, "/rover.files.v1.Files/GetCsvFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) DeleteCsvFile(ctx context.Context, in *DeleteCsvFileRequest, opts ...grpc.CallOption) (*DeleteCsvFileResponse, error) {
	out := new(DeleteCsvFileResponse)
	err := grpc.Invoke(ctx, "/rover.files.v1.Files/DeleteCsvFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) UploadCsvFile(ctx context.Context, opts ...grpc.CallOption) (Files_UploadCsvFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Files_serviceDesc.Streams[0], c.cc, "/rover.files.v1.Files/UploadCsvFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesUploadCsvFileClient{stream}
	return x, nil
}

type Files_UploadCsvFileClient interface {
	Send(*UploadCsvFileRequest) error
	CloseAndRecv() (*UploadCsvFileResponse, error)
	grpc.ClientStream
}

type filesUploadCsvFileClient struct {
	grpc.ClientStream
}

func (x *filesUploadCsvFileClient) Send(m *UploadCsvFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesUploadCsvFileClient) CloseAndRecv() (*UploadCsvFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadCsvFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesClient) ReadCsvFile(ctx context.Context, in *ReadCsvFileRequest, opts ...grpc.CallOption) (Files_ReadCsvFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Files_serviceDesc.Streams[1], c.cc, "/rover.files.v1.Files/ReadCsvFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesReadCsvFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Files_ReadCsvFileClient interface {
	Recv() (*ReadCsvFileResponse, error)
	grpc.ClientStream
}

type filesReadCsvFileClient struct {
	grpc.ClientStream
}

func (x *filesReadCsvFileClient) Recv() (*ReadCsvFileResponse, error) {
	m := new(ReadCsvFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Files service

type FilesServer interface {
	ListCsvFiles(context.Context, *ListCsvFilesRequest) (*ListCsvFilesResponse, error)
	GetCsvFile(context.Context, *GetCsvFileRequest) (*GetCsvFileResponse, error)
	DeleteCsvFile(context.Context, *DeleteCsvFileRequest) (*DeleteCsvFileResponse, error)
	UploadCsvFile(Files_UploadCsvFileServer) error
	ReadCsvFile(*ReadCsvFileRequest, Files_ReadCsvFileServer) error
}

func RegisterFilesServer(s *grpc.Server, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_ListCsvFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCsvFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).ListCsvFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.files.v1.Files/ListCsvFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).ListCsvFiles(ctx, req.(*ListCsvFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetCsvFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCsvFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetCsvFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.files.v1.Files/GetCsvFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetCsvFile(ctx, req.(*GetCsvFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_DeleteCsvFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCsvFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).DeleteCsvFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.files.v1.Files/DeleteCsvFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).DeleteCsvFile(ctx, req.(*DeleteCsvFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_UploadCsvFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesServer).UploadCsvFile(&filesUploadCsvFileServer{stream})
}

type Files_UploadCsvFileServer interface {
	SendAndClose(*UploadCsvFileResponse) error
	Recv() (*UploadCsvFileRequest, error)
	grpc.ServerStream
}

type filesUploadCsvFileServer struct {
	grpc.ServerStream
}

func (x *filesUploadCsvFileServer) SendAndClose(m *UploadCsvFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesUploadCsvFileServer) Recv() (*UploadCsvFileRequest, error) {
	m := new(UploadCsvFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Files_ReadCsvFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadCsvFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServer).ReadCsvFile(m, &filesReadCsvFileServer{stream})
}

type Files_ReadCsvFileServer interface {
	Send(*ReadCsvFileResponse) error
	grpc.ServerStream
}

type filesReadCsvFileServer struct {
	grpc.ServerStream
}

func (x *filesReadCsvFileServer) Send(m *ReadCsvFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rover.files.v1.Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCsvFiles",
			Handler:    _Files_ListCsvFiles_Handler,
		},
		{
			MethodName: "GetCsvFile",
			Handler:    _Files_GetCsvFile_Handler,
		},
		{
			MethodName: "DeleteCsvFile",
			Handler:    _Files_DeleteCsvFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadCsvFile",
			Handler:       _Files_UploadCsvFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadCsvFile",
			Handler:       _Files_ReadCsvFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "files/v1/files.proto",
}

func init() { proto.RegisterFile("files/v1/files.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x55, 0xeb, 0x6e, 0xd3, 0x4a,
	0x10, 0x6e, 0x6e, 0x4d, 0x3c, 0x69, 0x7b, 0x4e, 0xb7, 0xa9, 0xea, 0xe3, 0x1e, 0xda, 0xe2, 0x02,
	0x0a, 0x20, 0x39, 0x34, 0xf0, 0x03, 0x84, 0x10, 0x6a, 0xc2, 0xa5, 0x15, 0x20, 0xa1, 0x6d, 0xfb,
	0xa7, 0x48, 0x18, 0xd7, 0xde, 0xb6, 0x51, 0x1d, 0x3b, 0x78, 0xd7, 0x81, 0xf2, 0x04, 0xbc, 0x0b,
	0x2f, 0xc1, 0x6b, 0xf0, 0x36, 0xec, 0xc5, 0x4e, 0x93, 0x38, 0x04, 0x04, 0xa8, 0xbf, 0xbc, 0x3b,
	0x97, 0x6f, 0x66, 0xbe, 0x99, 0x59, 0x43, 0xed, 0xb8, 0xe3, 0x13, 0xda, 0xe8, 0x6f, 0x35, 0xe4,
	0xc1, 0xea, 0x45, 0x21, 0x0b, 0xd1, 0x42, 0x14, 0xf6, 0x49, 0x64, 0x29, 0x51, 0x7f, 0xcb, 0x58,
	0x3f, 0x09, 0xc3, 0x13, 0x9f, 0x34, 0xa4, 0xf6, 0x28, 0x3e, 0x6e, 0xb0, 0x4e, 0x97, 0x50, 0xe6,
	0x74, 0x7b, 0xca, 0xc1, 0x40, 0x4e, 0xcc, 0x4e, 0x05, 0x8a, 0xf8, 0x2a, 0x99, 0xf9, 0x35, 0x0f,
	0xe5, 0x36, 0xed, 0x3f, 0xe3, 0x20, 0x68, 0x01, 0xf2, 0x1d, 0x4f, 0xcf, 0x6d, 0xe4, 0xea, 0x25,
	0xcc, 0x4f, 0xe8, 0x0a, 0x80, 0xe3, 0xba, 0x61, 0x1c, 0x30, 0x9b, 0xcb, 0xf3, 0x52, 0xae, 0x25,
	0x92, 0x5d, 0x0f, 0x19, 0x50, 0x11, 0xb1, 0x03, 0xa7, 0x4b, 0xf4, 0x02, 0x57, 0x6a, 0x78, 0x70,
	0x47, 0xff, 0x41, 0x25, 0x88, 0xbb, 0x76, 0x14, 0x7e, 0xa0, 0x7a, 0x91, 0xeb, 0x16, 0x71, 0x99,
	0xdf, 0x31, 0xbf, 0xa2, 0x75, 0xa8, 0x0a, 0x95, 0x1b, 0xfa, 0x71, 0x37, 0xa0, 0x7a, 0x49, 0x6a,
	0x81, 0x8b, 0xda, 0x4a, 0x82, 0x56, 0x41, 0x13, 0x38, 0x36, 0xed, 0x7c, 0x22, 0xfa, 0x2c, 0x57,
	0x23, 0x05, 0xbc, 0xc7, 0xef, 0xe8, 0x3e, 0x94, 0x29, 0xaf, 0x88, 0x97, 0xac, 0x97, 0x37, 0x0a,
	0xf5, 0x6a, 0x73, 0xcd, 0x1a, 0xa5, 0xc1, 0x4a, 0xaa, 0xb1, 0xf6, 0xa4, 0x19, 0x4e, 0xcd, 0xd1,
	0x03, 0x00, 0x37, 0x22, 0x0e, 0x23, 0x9e, 0xed, 0x30, 0xbd, 0xc2, 0x71, 0xab, 0x4d, 0xc3, 0x52,
	0x9c, 0x59, 0x29, 0x67, 0xd6, 0x7e, 0xca, 0x19, 0xd6, 0x12, 0xeb, 0x6d, 0x66, 0xfc, 0x0f, 0xb3,
	0x0a, 0x0d, 0x21, 0x28, 0x7a, 0x0e, 0x73, 0x38, 0x49, 0x05, 0x5e, 0xaf, 0x3c, 0x9b, 0x11, 0x2c,
	0x3e, 0x27, 0x2c, 0x09, 0x8b, 0xc9, 0xfb, 0x98, 0x03, 0xa0, 0x47, 0x30, 0x27, 0x58, 0xe6, 0x65,
	0x06, 0x8c, 0x7c, 0x64, 0x92, 0x55, 0x11, 0x4f, 0x25, 0x2b, 0x1b, 0xc0, 0x73, 0xdd, 0xe6, 0xdf,
	0xb6, 0xb2, 0xc0, 0x55, 0xe7, 0xe2, 0x82, 0xd6, 0xa0, 0xea, 0xd2, 0xbe, 0x2d, 0x79, 0xb8, 0xe0,
	0xde, 0x55, 0x31, 0x76, 0x3d, 0x73, 0x07, 0xd0, 0x70, 0x4c, 0xda, 0x0b, 0x03, 0x4a, 0x50, 0x13,
	0x2a, 0xa9, 0x57, 0x12, 0x70, 0xe5, 0x07, 0xec, 0xe0, 0x72, 0x82, 0x65, 0x7e, 0xc9, 0xc1, 0xd2,
	0xcb, 0x0e, 0x4d, 0xb1, 0xe8, 0x5f, 0x2a, 0x80, 0x0f, 0x40, 0x18, 0x79, 0x24, 0xb2, 0x8f, 0xce,
	0x65, 0xf6, 0x1a, 0x2e, 0xcb, 0x7b, 0xeb, 0x5c, 0xf4, 0xb7, 0xe7, 0x9c, 0x24, 0xfd, 0x2d, 0xc8,
	0xca, 0x2a, 0x42, 0x20, 0xfb, 0xcb, 0x67, 0x4e, 0x2a, 0x59, 0x78, 0x46, 0x02, 0x39, 0x3a, 0x1a,
	0x96, 0xe6, 0xfb, 0x42, 0x60, 0x32, 0xa8, 0x8d, 0x26, 0x9b, 0x54, 0x7e, 0x0f, 0xb4, 0xb4, 0x72,
	0x2a, 0x9b, 0x33, 0xa5, 0xf4, 0x4a, 0x52, 0x3a, 0x45, 0x37, 0xe0, 0x9f, 0x80, 0x27, 0x6b, 0x0f,
	0x45, 0x54, 0xb9, 0xce, 0x0b, 0xf1, 0xeb, 0x41, 0xd4, 0x18, 0x6a, 0x4f, 0x88, 0x4f, 0x18, 0xb9,
	0xdc, 0x26, 0xaf, 0xc0, 0xf2, 0x58, 0x58, 0x55, 0xad, 0x49, 0x01, 0x61, 0xe2, 0x78, 0x97, 0x9b,
	0xcd, 0x6d, 0x58, 0x1a, 0x09, 0x9a, 0x30, 0x5f, 0x83, 0x92, 0xdf, 0x09, 0x12, 0xd6, 0x35, 0xac,
	0x2e, 0xe6, 0xe7, 0x3c, 0xd4, 0x0e, 0x7a, 0x7e, 0x98, 0x49, 0xf2, 0x31, 0x14, 0xbb, 0x44, 0x2e,
	0x90, 0x48, 0xee, 0xe6, 0x78, 0x8f, 0x26, 0xf9, 0x58, 0xaf, 0xb8, 0xc3, 0xce, 0x0c, 0x96, 0x8e,
	0xa8, 0x05, 0x25, 0xf7, 0x34, 0x0e, 0xce, 0x64, 0x82, 0xd5, 0xe6, 0xad, 0x5f, 0x42, 0x68, 0x0b,
	0x0f, 0x0e, 0xa1, 0x5c, 0x8d, 0xa7, 0x50, 0x14, 0x98, 0x7f, 0xc8, 0x98, 0xb1, 0x0a, 0x25, 0x09,
	0x3c, 0xf4, 0x2a, 0xe4, 0xea, 0x73, 0xea, 0x55, 0x68, 0x95, 0xa1, 0xd4, 0x77, 0xfc, 0x98, 0x98,
	0x2f, 0x60, 0x79, 0x2c, 0xa7, 0xdf, 0xdf, 0xd6, 0xe6, 0xb7, 0x02, 0x94, 0xd4, 0xec, 0xbe, 0x81,
	0xb9, 0xe1, 0x4d, 0x40, 0x9b, 0xe3, 0xbe, 0x13, 0x96, 0xda, 0xb8, 0x36, 0xdd, 0x28, 0x19, 0xaf,
	0x19, 0x74, 0x00, 0x70, 0xf1, 0xbc, 0xa0, 0xab, 0xe3, 0x5e, 0x99, 0xe7, 0xce, 0x30, 0xa7, 0x99,
	0x0c, 0x60, 0xdf, 0xc2, 0xfc, 0xc8, 0x40, 0xa3, 0x4c, 0x3e, 0x93, 0xd6, 0xcc, 0xb8, 0xfe, 0x13,
	0xab, 0x01, 0xfe, 0x3b, 0x98, 0x1f, 0xa1, 0x3a, 0x8b, 0x3f, 0x69, 0x3a, 0xb2, 0xf8, 0x13, 0xfb,
	0x65, 0xce, 0xd4, 0x73, 0xe8, 0x10, 0xaa, 0x43, 0x4b, 0x80, 0x32, 0x65, 0x67, 0xd7, 0xd2, 0xd8,
	0x9c, 0x6a, 0x93, 0x62, 0xdf, 0xc9, 0xb5, 0xfe, 0x3d, 0x5c, 0x48, 0xff, 0xf3, 0x0f, 0xe5, 0xe1,
	0x68, 0x56, 0xfe, 0x96, 0xee, 0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xb4, 0xdb, 0xff, 0x00,
	0x08, 0x00, 0x00,
}

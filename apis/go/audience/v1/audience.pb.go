// Code generated by protoc-gen-go.
// source: audience/v1/audience.proto
// DO NOT EDIT!

/*
Package audience is a generated protocol buffer package.

It is generated from these files:
	audience/v1/audience.proto

It has these top-level messages:
	CreateProfileRequest
	DeleteProfileRequest
	UpdateProfileRequest
	GetProfileByDeviceIdRequest
	GetProfileSchemaRequest
	Profile
	ProfileSchema
	CreateDeviceRequest
	DeleteDeviceRequest
	PutDeviceRequest
	SetDevicePushTokenRequest
	SetDeviceProfileRequest
	Device
	ValueUpdates
	ValueUpdate
	Value
	SchemaAttribute
	Version
*/
package audience

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/roverplatform/rover/go/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import rover_auth_v1 "github.com/roverplatform/rover/apis/go/auth/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Null int32

const (
	// Null value.
	Null_NULL Null = 0
)

var Null_name = map[int32]string{
	0: "NULL",
}
var Null_value = map[string]int32{
	"NULL": 0,
}

func (x Null) String() string {
	return proto.EnumName(Null_name, int32(x))
}
func (Null) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// UpdateType describes possible updates
type ValueUpdate_UpdateType int32

const (
	ValueUpdate_SET    ValueUpdate_UpdateType = 0
	ValueUpdate_DELETE ValueUpdate_UpdateType = 1
	ValueUpdate_CLEAR  ValueUpdate_UpdateType = 2
	// ADD and REMOVE are for array_values
	ValueUpdate_ADD    ValueUpdate_UpdateType = 3
	ValueUpdate_REMOVE ValueUpdate_UpdateType = 4
)

var ValueUpdate_UpdateType_name = map[int32]string{
	0: "SET",
	1: "DELETE",
	2: "CLEAR",
	3: "ADD",
	4: "REMOVE",
}
var ValueUpdate_UpdateType_value = map[string]int32{
	"SET":    0,
	"DELETE": 1,
	"CLEAR":  2,
	"ADD":    3,
	"REMOVE": 4,
}

func (x ValueUpdate_UpdateType) String() string {
	return proto.EnumName(ValueUpdate_UpdateType_name, int32(x))
}
func (ValueUpdate_UpdateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

type CreateProfileRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
}

func (m *CreateProfileRequest) Reset()                    { *m = CreateProfileRequest{} }
func (m *CreateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProfileRequest) ProtoMessage()               {}
func (*CreateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateProfileRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

type DeleteProfileRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	ProfileId   string                     `protobuf:"bytes,2,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
}

func (m *DeleteProfileRequest) Reset()                    { *m = DeleteProfileRequest{} }
func (m *DeleteProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProfileRequest) ProtoMessage()               {}
func (*DeleteProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeleteProfileRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *DeleteProfileRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

type UpdateProfileRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	Id          string                     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	ProfileId   string                     `protobuf:"bytes,3,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
	Attributes  map[string]*ValueUpdates   `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpdateProfileRequest) Reset()                    { *m = UpdateProfileRequest{} }
func (m *UpdateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileRequest) ProtoMessage()               {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateProfileRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *UpdateProfileRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateProfileRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *UpdateProfileRequest) GetAttributes() map[string]*ValueUpdates {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type GetProfileByDeviceIdRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	DeviceId    string                     `protobuf:"bytes,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *GetProfileByDeviceIdRequest) Reset()                    { *m = GetProfileByDeviceIdRequest{} }
func (m *GetProfileByDeviceIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProfileByDeviceIdRequest) ProtoMessage()               {}
func (*GetProfileByDeviceIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetProfileByDeviceIdRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *GetProfileByDeviceIdRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

type GetProfileSchemaRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
}

func (m *GetProfileSchemaRequest) Reset()                    { *m = GetProfileSchemaRequest{} }
func (m *GetProfileSchemaRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProfileSchemaRequest) ProtoMessage()               {}
func (*GetProfileSchemaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetProfileSchemaRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

// Profile represents a variable set of a user attributes that customer pushes to Rover.
// It can be thought as a flat JSON object of simple key-value pairs ( There is no nesting of attributes )
type Profile struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AccountId int32  `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// identifier represents an id used by customers to map back this profile to their data
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	// profile attributes
	Attributes map[string]*Value `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Profile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Profile) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Profile) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Profile) GetAttributes() map[string]*Value {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// ProfileSchema describes profiles' schema with the collection of SchemaAttribute descriptors
type ProfileSchema struct {
	Attributes []*SchemaAttribute `protobuf:"bytes,10,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *ProfileSchema) Reset()                    { *m = ProfileSchema{} }
func (m *ProfileSchema) String() string            { return proto.CompactTextString(m) }
func (*ProfileSchema) ProtoMessage()               {}
func (*ProfileSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProfileSchema) GetAttributes() []*SchemaAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type CreateDeviceRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	ProfileId   string                     `protobuf:"bytes,2,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
}

func (m *CreateDeviceRequest) Reset()                    { *m = CreateDeviceRequest{} }
func (m *CreateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceRequest) ProtoMessage()               {}
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateDeviceRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *CreateDeviceRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

type DeleteDeviceRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	Id          string                     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteDeviceRequest) Reset()                    { *m = DeleteDeviceRequest{} }
func (m *DeleteDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceRequest) ProtoMessage()               {}
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteDeviceRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *DeleteDeviceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Device.id, and Device.account_id
type PutDeviceRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	Device      *Device                    `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *PutDeviceRequest) Reset()                    { *m = PutDeviceRequest{} }
func (m *PutDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*PutDeviceRequest) ProtoMessage()               {}
func (*PutDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PutDeviceRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *PutDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type SetDevicePushTokenRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	Id          string                     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Token       string                     `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *SetDevicePushTokenRequest) Reset()                    { *m = SetDevicePushTokenRequest{} }
func (m *SetDevicePushTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDevicePushTokenRequest) ProtoMessage()               {}
func (*SetDevicePushTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SetDevicePushTokenRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *SetDevicePushTokenRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetDevicePushTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SetDeviceProfileRequest struct {
	AuthContext *rover_auth_v1.AuthContext `protobuf:"bytes,1,opt,name=auth_context,json=authContext" json:"auth_context,omitempty"`
	Id          string                     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	ProfileId   string                     `protobuf:"bytes,3,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
}

func (m *SetDeviceProfileRequest) Reset()                    { *m = SetDeviceProfileRequest{} }
func (m *SetDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDeviceProfileRequest) ProtoMessage()               {}
func (*SetDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetDeviceProfileRequest) GetAuthContext() *rover_auth_v1.AuthContext {
	if m != nil {
		return m.AuthContext
	}
	return nil
}

func (m *SetDeviceProfileRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetDeviceProfileRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

// Devices represent a single device that the Rover sdk is installed on. The
// currently supported platforms are iOS,  Android, and Web. A device is the
// last state that the sdk reported to the server. Only the device itself is
// allowed to update its state no one elses.
type Device struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AccountId int32  `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// TODO: attributes
	Token         string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	LocaleLang    string `protobuf:"bytes,5,opt,name=locale_lang,json=localeLang" json:"locale_lang,omitempty"`
	LocaleRegion  string `protobuf:"bytes,6,opt,name=locale_region,json=localeRegion" json:"locale_region,omitempty"`
	TimeZone      string `protobuf:"bytes,7,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	SdkVersion    string `protobuf:"bytes,8,opt,name=sdk_version,json=sdkVersion" json:"sdk_version,omitempty"`
	Platform      string `protobuf:"bytes,9,opt,name=platform" json:"platform,omitempty"`
	OsName        string `protobuf:"bytes,10,opt,name=os_name,json=osName" json:"os_name,omitempty"`
	OsVersion     string `protobuf:"bytes,11,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	Model         string `protobuf:"bytes,12,opt,name=model" json:"model,omitempty"`
	Manufacturer  string `protobuf:"bytes,13,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Carrier       string `protobuf:"bytes,14,opt,name=carrier" json:"carrier,omitempty"`
	AppIdentifier string `protobuf:"bytes,15,opt,name=app_identifier,json=appIdentifier" json:"app_identifier,omitempty"`
	// an app gets a quota for 20 ibeacon slots.
	// the app can update those slots dynamically.
	// if gimbal_mode is set those slots are managed by gimbal instead of rover
	GimbalMode bool `protobuf:"varint,16,opt,name=gimbal_mode,json=gimbalMode" json:"gimbal_mode,omitempty"`
	// Location location                    = 17;
	BackgroundEnabled         bool                       `protobuf:"varint,18,opt,name=background_enabled,json=backgroundEnabled" json:"background_enabled,omitempty"`
	NotificationsEnabled      bool                       `protobuf:"varint,19,opt,name=notifications_enabled,json=notificationsEnabled" json:"notifications_enabled,omitempty"`
	BluetoothEnabled          bool                       `protobuf:"varint,20,opt,name=bluetooth_enabled,json=bluetoothEnabled" json:"bluetooth_enabled,omitempty"`
	LocationMonitoringEnabled bool                       `protobuf:"varint,21,opt,name=location_monitoring_enabled,json=locationMonitoringEnabled" json:"location_monitoring_enabled,omitempty"`
	Development               bool                       `protobuf:"varint,22,opt,name=development" json:"development,omitempty"`
	Aid                       string                     `protobuf:"bytes,23,opt,name=aid" json:"aid,omitempty"`
	CreatedAt                 *google_protobuf.Timestamp `protobuf:"bytes,24,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt                 *google_protobuf.Timestamp `protobuf:"bytes,25,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Device) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Device) GetLocaleLang() string {
	if m != nil {
		return m.LocaleLang
	}
	return ""
}

func (m *Device) GetLocaleRegion() string {
	if m != nil {
		return m.LocaleRegion
	}
	return ""
}

func (m *Device) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *Device) GetSdkVersion() string {
	if m != nil {
		return m.SdkVersion
	}
	return ""
}

func (m *Device) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Device) GetOsName() string {
	if m != nil {
		return m.OsName
	}
	return ""
}

func (m *Device) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Device) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device) GetCarrier() string {
	if m != nil {
		return m.Carrier
	}
	return ""
}

func (m *Device) GetAppIdentifier() string {
	if m != nil {
		return m.AppIdentifier
	}
	return ""
}

func (m *Device) GetGimbalMode() bool {
	if m != nil {
		return m.GimbalMode
	}
	return false
}

func (m *Device) GetBackgroundEnabled() bool {
	if m != nil {
		return m.BackgroundEnabled
	}
	return false
}

func (m *Device) GetNotificationsEnabled() bool {
	if m != nil {
		return m.NotificationsEnabled
	}
	return false
}

func (m *Device) GetBluetoothEnabled() bool {
	if m != nil {
		return m.BluetoothEnabled
	}
	return false
}

func (m *Device) GetLocationMonitoringEnabled() bool {
	if m != nil {
		return m.LocationMonitoringEnabled
	}
	return false
}

func (m *Device) GetDevelopment() bool {
	if m != nil {
		return m.Development
	}
	return false
}

func (m *Device) GetAid() string {
	if m != nil {
		return m.Aid
	}
	return ""
}

func (m *Device) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Device) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// ValueUpdates allows bulk updates as adding/removing tags in the same call
type ValueUpdates struct {
	Values []*ValueUpdate `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ValueUpdates) Reset()                    { *m = ValueUpdates{} }
func (m *ValueUpdates) String() string            { return proto.CompactTextString(m) }
func (*ValueUpdates) ProtoMessage()               {}
func (*ValueUpdates) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ValueUpdates) GetValues() []*ValueUpdate {
	if m != nil {
		return m.Values
	}
	return nil
}

// ValueUpdate represents a change that needs to be applied to already existing value
type ValueUpdate struct {
	Value      *Value                 `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	UpdateType ValueUpdate_UpdateType `protobuf:"varint,3,opt,name=update_type,json=updateType,enum=rover.audience.v1.ValueUpdate_UpdateType" json:"update_type,omitempty"`
}

func (m *ValueUpdate) Reset()                    { *m = ValueUpdate{} }
func (m *ValueUpdate) String() string            { return proto.CompactTextString(m) }
func (*ValueUpdate) ProtoMessage()               {}
func (*ValueUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ValueUpdate) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ValueUpdate) GetUpdateType() ValueUpdate_UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return ValueUpdate_SET
}

type Value struct {
	// Types that are valid to be assigned to ValueType:
	//	*Value_BooleanValue
	//	*Value_IntegerValue
	//	*Value_DoubleValue
	//	*Value_StringValue
	//	*Value_ArrayValue
	//	*Value_VersionValue
	//	*Value_NullValue
	//	*Value_TimestampValue
	ValueType isValue_ValueType `protobuf_oneof:"value_type"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type isValue_ValueType interface {
	isValue_ValueType()
}

type Value_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,1,opt,name=boolean_value,json=booleanValue,oneof"`
}
type Value_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,oneof"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}
type Value_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,oneof"`
}
type Value_ArrayValue struct {
	ArrayValue *Value_Array `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,oneof"`
}
type Value_VersionValue struct {
	VersionValue *Version `protobuf:"bytes,6,opt,name=version_value,json=versionValue,oneof"`
}
type Value_NullValue struct {
	NullValue Null `protobuf:"varint,8,opt,name=null_value,json=nullValue,enum=rover.audience.v1.Null,oneof"`
}
type Value_TimestampValue struct {
	TimestampValue *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=timestamp_value,json=timestampValue,oneof"`
}

func (*Value_BooleanValue) isValue_ValueType()   {}
func (*Value_IntegerValue) isValue_ValueType()   {}
func (*Value_DoubleValue) isValue_ValueType()    {}
func (*Value_StringValue) isValue_ValueType()    {}
func (*Value_ArrayValue) isValue_ValueType()     {}
func (*Value_VersionValue) isValue_ValueType()   {}
func (*Value_NullValue) isValue_ValueType()      {}
func (*Value_TimestampValue) isValue_ValueType() {}

func (m *Value) GetValueType() isValue_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (m *Value) GetBooleanValue() bool {
	if x, ok := m.GetValueType().(*Value_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (m *Value) GetIntegerValue() int64 {
	if x, ok := m.GetValueType().(*Value_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetValueType().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetValueType().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetArrayValue() *Value_Array {
	if x, ok := m.GetValueType().(*Value_ArrayValue); ok {
		return x.ArrayValue
	}
	return nil
}

func (m *Value) GetVersionValue() *Version {
	if x, ok := m.GetValueType().(*Value_VersionValue); ok {
		return x.VersionValue
	}
	return nil
}

func (m *Value) GetNullValue() Null {
	if x, ok := m.GetValueType().(*Value_NullValue); ok {
		return x.NullValue
	}
	return Null_NULL
}

func (m *Value) GetTimestampValue() *google_protobuf.Timestamp {
	if x, ok := m.GetValueType().(*Value_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_BooleanValue)(nil),
		(*Value_IntegerValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_ArrayValue)(nil),
		(*Value_VersionValue)(nil),
		(*Value_NullValue)(nil),
		(*Value_TimestampValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value_type
	switch x := m.ValueType.(type) {
	case *Value_BooleanValue:
		t := uint64(0)
		if x.BooleanValue {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_IntegerValue:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntegerValue))
	case *Value_DoubleValue:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Value_StringValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Value_ArrayValue:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArrayValue); err != nil {
			return err
		}
	case *Value_VersionValue:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VersionValue); err != nil {
			return err
		}
	case *Value_NullValue:
		b.EncodeVarint(8<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.NullValue))
	case *Value_TimestampValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TimestampValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.ValueType has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value_type.boolean_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_BooleanValue{x != 0}
		return true, err
	case 2: // value_type.integer_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_IntegerValue{int64(x)}
		return true, err
	case 3: // value_type.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ValueType = &Value_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 4: // value_type.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ValueType = &Value_StringValue{x}
		return true, err
	case 5: // value_type.array_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Value_Array)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_ArrayValue{msg}
		return true, err
	case 6: // value_type.version_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Version)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_VersionValue{msg}
		return true, err
	case 8: // value_type.null_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_NullValue{Null(x)}
		return true, err
	case 7: // value_type.timestamp_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Timestamp)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_TimestampValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value_type
	switch x := m.ValueType.(type) {
	case *Value_BooleanValue:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *Value_IntegerValue:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntegerValue))
	case *Value_DoubleValue:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *Value_StringValue:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Value_ArrayValue:
		s := proto.Size(x.ArrayValue)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_VersionValue:
		s := proto.Size(x.VersionValue)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_NullValue:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NullValue))
	case *Value_TimestampValue:
		s := proto.Size(x.TimestampValue)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Array a values container
type Value_Array struct {
	Values []*Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *Value_Array) Reset()                    { *m = Value_Array{} }
func (m *Value_Array) String() string            { return proto.CompactTextString(m) }
func (*Value_Array) ProtoMessage()               {}
func (*Value_Array) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

func (m *Value_Array) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type SchemaAttribute struct {
	AccountId int32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// attribute id
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// attribute name
	Attribute string `protobuf:"bytes,3,opt,name=attribute" json:"attribute,omitempty"`
	// attribute type descriptor, ie string/array[string]
	AttributeType string `protobuf:"bytes,4,opt,name=attributeType" json:"attributeType,omitempty"`
	// attribute path if nested
	Path string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	// attribute created at timestamp
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *SchemaAttribute) Reset()                    { *m = SchemaAttribute{} }
func (m *SchemaAttribute) String() string            { return proto.CompactTextString(m) }
func (*SchemaAttribute) ProtoMessage()               {}
func (*SchemaAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SchemaAttribute) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *SchemaAttribute) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SchemaAttribute) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *SchemaAttribute) GetAttributeType() string {
	if m != nil {
		return m.AttributeType
	}
	return ""
}

func (m *SchemaAttribute) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SchemaAttribute) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Version struct {
	Major int32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor int32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
	// optional
	Revision int32 `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Version) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *Version) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *Version) GetRevision() int32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateProfileRequest)(nil), "rover.audience.v1.CreateProfileRequest")
	proto.RegisterType((*DeleteProfileRequest)(nil), "rover.audience.v1.DeleteProfileRequest")
	proto.RegisterType((*UpdateProfileRequest)(nil), "rover.audience.v1.UpdateProfileRequest")
	proto.RegisterType((*GetProfileByDeviceIdRequest)(nil), "rover.audience.v1.GetProfileByDeviceIdRequest")
	proto.RegisterType((*GetProfileSchemaRequest)(nil), "rover.audience.v1.GetProfileSchemaRequest")
	proto.RegisterType((*Profile)(nil), "rover.audience.v1.Profile")
	proto.RegisterType((*ProfileSchema)(nil), "rover.audience.v1.ProfileSchema")
	proto.RegisterType((*CreateDeviceRequest)(nil), "rover.audience.v1.CreateDeviceRequest")
	proto.RegisterType((*DeleteDeviceRequest)(nil), "rover.audience.v1.DeleteDeviceRequest")
	proto.RegisterType((*PutDeviceRequest)(nil), "rover.audience.v1.PutDeviceRequest")
	proto.RegisterType((*SetDevicePushTokenRequest)(nil), "rover.audience.v1.SetDevicePushTokenRequest")
	proto.RegisterType((*SetDeviceProfileRequest)(nil), "rover.audience.v1.SetDeviceProfileRequest")
	proto.RegisterType((*Device)(nil), "rover.audience.v1.Device")
	proto.RegisterType((*ValueUpdates)(nil), "rover.audience.v1.ValueUpdates")
	proto.RegisterType((*ValueUpdate)(nil), "rover.audience.v1.ValueUpdate")
	proto.RegisterType((*Value)(nil), "rover.audience.v1.Value")
	proto.RegisterType((*Value_Array)(nil), "rover.audience.v1.Value.Array")
	proto.RegisterType((*SchemaAttribute)(nil), "rover.audience.v1.SchemaAttribute")
	proto.RegisterType((*Version)(nil), "rover.audience.v1.Version")
	proto.RegisterEnum("rover.audience.v1.Null", Null_name, Null_value)
	proto.RegisterEnum("rover.audience.v1.ValueUpdate_UpdateType", ValueUpdate_UpdateType_name, ValueUpdate_UpdateType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Audience service

type AudienceClient interface {
	// CreateProfile creates a new empty profile under a given account.
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	//  DeleteProfile deletes a profile from db and all segments
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	// UpdateProfile updates profile with provided subset of attributes
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	// GetProfileByDeviceId returns a profile which is associated to the device id
	GetProfileByDeviceId(ctx context.Context, in *GetProfileByDeviceIdRequest, opts ...grpc.CallOption) (*Profile, error)
	// GetProfileSchema returns the currently tracked profiles schema by account id
	GetProfileSchema(ctx context.Context, in *GetProfileSchemaRequest, opts ...grpc.CallOption) (*ProfileSchema, error)
	// CreateDevice creates a an "empty" device under a given account.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// DeleteDevice deletes device from the database and removes it from any segments
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// PutDevice updates the device
	PutDevice(ctx context.Context, in *PutDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// SetDevicePushToken
	SetDevicePushToken(ctx context.Context, in *SetDevicePushTokenRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// PutDevice updates the device
	SetDeviceProfile(ctx context.Context, in *SetDeviceProfileRequest, opts ...grpc.CallOption) (*Device, error)
}

type audienceClient struct {
	cc *grpc.ClientConn
}

func NewAudienceClient(cc *grpc.ClientConn) AudienceClient {
	return &audienceClient{cc}
}

func (c *audienceClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/CreateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/DeleteProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/UpdateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) GetProfileByDeviceId(ctx context.Context, in *GetProfileByDeviceIdRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/GetProfileByDeviceId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) GetProfileSchema(ctx context.Context, in *GetProfileSchemaRequest, opts ...grpc.CallOption) (*ProfileSchema, error) {
	out := new(ProfileSchema)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/GetProfileSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/CreateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) PutDevice(ctx context.Context, in *PutDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/PutDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) SetDevicePushToken(ctx context.Context, in *SetDevicePushTokenRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/SetDevicePushToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceClient) SetDeviceProfile(ctx context.Context, in *SetDeviceProfileRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/rover.audience.v1.Audience/SetDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Audience service

type AudienceServer interface {
	// CreateProfile creates a new empty profile under a given account.
	CreateProfile(context.Context, *CreateProfileRequest) (*Profile, error)
	//  DeleteProfile deletes a profile from db and all segments
	DeleteProfile(context.Context, *DeleteProfileRequest) (*Profile, error)
	// UpdateProfile updates profile with provided subset of attributes
	UpdateProfile(context.Context, *UpdateProfileRequest) (*Profile, error)
	// GetProfileByDeviceId returns a profile which is associated to the device id
	GetProfileByDeviceId(context.Context, *GetProfileByDeviceIdRequest) (*Profile, error)
	// GetProfileSchema returns the currently tracked profiles schema by account id
	GetProfileSchema(context.Context, *GetProfileSchemaRequest) (*ProfileSchema, error)
	// CreateDevice creates a an "empty" device under a given account.
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	// DeleteDevice deletes device from the database and removes it from any segments
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*Device, error)
	// PutDevice updates the device
	PutDevice(context.Context, *PutDeviceRequest) (*Device, error)
	// SetDevicePushToken
	SetDevicePushToken(context.Context, *SetDevicePushTokenRequest) (*google_protobuf1.Empty, error)
	// PutDevice updates the device
	SetDeviceProfile(context.Context, *SetDeviceProfileRequest) (*Device, error)
}

func RegisterAudienceServer(s *grpc.Server, srv AudienceServer) {
	s.RegisterService(&_Audience_serviceDesc, srv)
}

func _Audience_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).DeleteProfile(ctx, req.(*DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_GetProfileByDeviceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByDeviceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).GetProfileByDeviceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/GetProfileByDeviceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).GetProfileByDeviceId(ctx, req.(*GetProfileByDeviceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_GetProfileSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).GetProfileSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/GetProfileSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).GetProfileSchema(ctx, req.(*GetProfileSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_PutDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).PutDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/PutDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).PutDevice(ctx, req.(*PutDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_SetDevicePushToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDevicePushTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).SetDevicePushToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/SetDevicePushToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).SetDevicePushToken(ctx, req.(*SetDevicePushTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audience_SetDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServer).SetDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.audience.v1.Audience/SetDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServer).SetDeviceProfile(ctx, req.(*SetDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Audience_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rover.audience.v1.Audience",
	HandlerType: (*AudienceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _Audience_CreateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _Audience_DeleteProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Audience_UpdateProfile_Handler,
		},
		{
			MethodName: "GetProfileByDeviceId",
			Handler:    _Audience_GetProfileByDeviceId_Handler,
		},
		{
			MethodName: "GetProfileSchema",
			Handler:    _Audience_GetProfileSchema_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Audience_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Audience_DeleteDevice_Handler,
		},
		{
			MethodName: "PutDevice",
			Handler:    _Audience_PutDevice_Handler,
		},
		{
			MethodName: "SetDevicePushToken",
			Handler:    _Audience_SetDevicePushToken_Handler,
		},
		{
			MethodName: "SetDeviceProfile",
			Handler:    _Audience_SetDeviceProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audience/v1/audience.proto",
}

func init() { proto.RegisterFile("audience/v1/audience.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x6f, 0x73, 0xdb, 0x44,
	0x13, 0x8f, 0xe2, 0xd8, 0xb1, 0xd7, 0x76, 0xe2, 0x5e, 0xdd, 0x46, 0x71, 0x9e, 0xa7, 0xc9, 0xa8,
	0x14, 0x42, 0x01, 0x87, 0xa4, 0x03, 0xb4, 0x30, 0x30, 0xe3, 0x34, 0x86, 0xa4, 0xa4, 0xa5, 0x55,
	0xd2, 0x16, 0xfa, 0x02, 0x73, 0xb6, 0x2e, 0xb6, 0x88, 0xac, 0x13, 0xd2, 0xc9, 0x83, 0x79, 0xc5,
	0x0b, 0x66, 0xf8, 0x52, 0xf0, 0x0d, 0x78, 0xc7, 0x07, 0xe1, 0x0b, 0xc0, 0x0c, 0x73, 0x7f, 0x24,
	0xcb, 0xaa, 0xec, 0xb6, 0x33, 0x01, 0xde, 0xe9, 0xf6, 0x7e, 0xfb, 0xdb, 0xbd, 0xdb, 0xbb, 0xdd,
	0x3d, 0x41, 0x03, 0x87, 0x96, 0x4d, 0xdc, 0x1e, 0xd9, 0x19, 0xed, 0xee, 0x44, 0xdf, 0x4d, 0xcf,
	0xa7, 0x8c, 0xa2, 0x4b, 0x3e, 0x1d, 0x11, 0xbf, 0x19, 0x4b, 0x47, 0xbb, 0x8d, 0xcd, 0x3e, 0xa5,
	0x7d, 0x87, 0xec, 0x08, 0x40, 0x37, 0x3c, 0xdb, 0x61, 0xf6, 0x90, 0x04, 0x0c, 0x0f, 0x3d, 0xa9,
	0xd3, 0xd8, 0x48, 0x03, 0xc8, 0xd0, 0x63, 0x63, 0x35, 0x89, 0x70, 0xc8, 0x06, 0xd2, 0x10, 0x1b,
	0x48, 0x99, 0xf1, 0x18, 0xea, 0x77, 0x7d, 0x82, 0x19, 0x79, 0xe8, 0xd3, 0x33, 0xdb, 0x21, 0x26,
	0xf9, 0x2e, 0x24, 0x01, 0x43, 0x1f, 0x43, 0x85, 0xa3, 0x3a, 0x3d, 0xea, 0x32, 0xf2, 0x3d, 0xd3,
	0xb5, 0x2d, 0x6d, 0xbb, 0xbc, 0xd7, 0x68, 0x46, 0x3e, 0xb1, 0x41, 0x73, 0xb4, 0xdb, 0x6c, 0x85,
	0x6c, 0x70, 0x57, 0x22, 0xcc, 0x32, 0x9e, 0x0c, 0x0c, 0x06, 0xf5, 0x03, 0xe2, 0x90, 0x0b, 0xa6,
	0x45, 0xff, 0x07, 0xf0, 0x24, 0x61, 0xc7, 0xb6, 0xf4, 0xc5, 0x2d, 0x6d, 0xbb, 0x64, 0x96, 0x94,
	0xe4, 0xc8, 0x32, 0x7e, 0x5d, 0x84, 0xfa, 0x63, 0xcf, 0xba, 0xe8, 0xd5, 0xa0, 0x15, 0x58, 0x8c,
	0xcd, 0x2d, 0xda, 0x56, 0xca, 0x8d, 0x5c, 0xca, 0x0d, 0xf4, 0x14, 0x00, 0x33, 0xe6, 0xdb, 0xdd,
	0x90, 0x91, 0x40, 0x5f, 0xda, 0xca, 0x6d, 0x97, 0xf7, 0x3e, 0x68, 0x3e, 0x17, 0xcd, 0x66, 0x96,
	0xab, 0xcd, 0x56, 0xac, 0xd9, 0x76, 0x99, 0x3f, 0x36, 0x13, 0x54, 0x8d, 0xaf, 0x61, 0x35, 0x35,
	0x8d, 0x6a, 0x90, 0x3b, 0x27, 0x63, 0xb1, 0xa0, 0x92, 0xc9, 0x3f, 0xd1, 0x7b, 0x90, 0x1f, 0x61,
	0x27, 0x24, 0xc2, 0xdf, 0xf2, 0xde, 0x66, 0x86, 0xe1, 0x27, 0x7c, 0x5e, 0x5a, 0x0f, 0x4c, 0x89,
	0xfe, 0x70, 0xf1, 0xb6, 0x66, 0x8c, 0x61, 0xe3, 0x33, 0xc2, 0x94, 0x43, 0xfb, 0xe3, 0x03, 0x32,
	0xb2, 0x7b, 0xe4, 0xc8, 0xba, 0xa0, 0x5d, 0xdc, 0x80, 0x92, 0x25, 0x18, 0x27, 0xb1, 0x2b, 0x5a,
	0xca, 0x84, 0xf1, 0x25, 0xac, 0x4d, 0x4c, 0x9f, 0xf4, 0x06, 0x64, 0x88, 0x2f, 0xe8, 0x28, 0xfe,
	0xa5, 0xc1, 0xb2, 0xe2, 0x55, 0x81, 0xd4, 0x92, 0x81, 0xc4, 0xbd, 0x1e, 0x0d, 0x5d, 0x16, 0xf9,
	0x94, 0x37, 0x4b, 0x4a, 0x72, 0x64, 0xa1, 0x6b, 0x00, 0xb6, 0x45, 0x5c, 0x66, 0x9f, 0xd9, 0xc4,
	0x57, 0x71, 0x4e, 0x48, 0xd0, 0xbd, 0x8c, 0x40, 0xdf, 0xcc, 0xd8, 0x6f, 0x65, 0x7e, 0x6e, 0x6c,
	0x9f, 0xbe, 0x4c, 0x6c, 0x9b, 0xd3, 0xb1, 0xd5, 0x67, 0xc5, 0x36, 0x19, 0xd4, 0x13, 0xa8, 0x4e,
	0x6d, 0x2b, 0xda, 0x9f, 0xf2, 0x1a, 0x84, 0xd7, 0x46, 0x06, 0x93, 0x84, 0xc7, 0x4e, 0x25, 0xbd,
	0x35, 0x02, 0xb8, 0x2c, 0xd3, 0x86, 0x3c, 0x23, 0xff, 0xce, 0xf5, 0xb6, 0xe0, 0xb2, 0x4c, 0x2a,
	0x17, 0x6a, 0x34, 0x75, 0xb9, 0x8d, 0x9f, 0x34, 0xa8, 0x3d, 0x0c, 0xd9, 0x85, 0xda, 0xd8, 0x85,
	0x82, 0x3c, 0xe9, 0x2a, 0x70, 0xeb, 0x19, 0xdb, 0xad, 0x0c, 0x2a, 0xa0, 0xf1, 0xa3, 0x06, 0xeb,
	0x27, 0x44, 0xb9, 0xf1, 0x30, 0x0c, 0x06, 0xa7, 0xf4, 0x9c, 0xb8, 0xff, 0x50, 0x42, 0xab, 0x43,
	0x9e, 0x71, 0x7a, 0x75, 0xc6, 0xe5, 0xc0, 0xf8, 0x59, 0x83, 0xb5, 0x89, 0x0b, 0xff, 0x61, 0x46,
	0x35, 0x7e, 0x29, 0x40, 0x41, 0xba, 0xf1, 0xaa, 0x57, 0x38, 0x73, 0x65, 0x68, 0x13, 0xca, 0x0e,
	0xed, 0x61, 0x87, 0x74, 0x1c, 0xec, 0xf6, 0xf5, 0xbc, 0xbc, 0xd9, 0x52, 0x74, 0x8c, 0xdd, 0x3e,
	0xba, 0x0e, 0x55, 0x05, 0xf0, 0x49, 0xdf, 0xa6, 0xae, 0x5e, 0x10, 0x90, 0x8a, 0x14, 0x9a, 0x42,
	0xc6, 0x13, 0x1a, 0xaf, 0xbf, 0x9d, 0x1f, 0xa8, 0x4b, 0xf4, 0x65, 0x99, 0xd0, 0xb8, 0xe0, 0x19,
	0x75, 0x09, 0x37, 0x11, 0x58, 0xe7, 0x9d, 0x11, 0xf1, 0x03, 0xae, 0x5f, 0x94, 0x26, 0x02, 0xeb,
	0xfc, 0x89, 0x94, 0xa0, 0x06, 0x14, 0x3d, 0x07, 0xb3, 0x33, 0xea, 0x0f, 0xf5, 0x92, 0x54, 0x8e,
	0xc6, 0x68, 0x0d, 0x96, 0x69, 0xd0, 0x71, 0xf1, 0x90, 0xe8, 0x20, 0xa6, 0x0a, 0x34, 0x78, 0x80,
	0x87, 0x84, 0xaf, 0x96, 0x06, 0x31, 0x69, 0x59, 0xee, 0x13, 0x0d, 0x22, 0xce, 0x3a, 0xe4, 0x87,
	0xd4, 0x22, 0x8e, 0x5e, 0x91, 0xab, 0x15, 0x03, 0x64, 0x40, 0x65, 0x88, 0xdd, 0xf0, 0x0c, 0xf7,
	0x58, 0xe8, 0x13, 0x5f, 0xaf, 0xca, 0xb5, 0x24, 0x65, 0x48, 0x87, 0xe5, 0x1e, 0xf6, 0x7d, 0x9e,
	0xe7, 0x56, 0xc4, 0x74, 0x34, 0x44, 0x37, 0x60, 0x05, 0x7b, 0x5e, 0x27, 0x91, 0x08, 0x57, 0x05,
	0xa0, 0x8a, 0x3d, 0xef, 0x68, 0x92, 0x0b, 0x37, 0xa1, 0xdc, 0xb7, 0x87, 0x5d, 0xec, 0x74, 0xb8,
	0x51, 0xbd, 0xb6, 0xa5, 0x6d, 0x17, 0x4d, 0x90, 0xa2, 0xfb, 0xd4, 0x22, 0xe8, 0x1d, 0x40, 0x5d,
	0xdc, 0x3b, 0xef, 0xfb, 0x34, 0x74, 0xad, 0x0e, 0x71, 0x71, 0xd7, 0x21, 0x96, 0x8e, 0x04, 0xee,
	0xd2, 0x64, 0xa6, 0x2d, 0x27, 0xd0, 0x2d, 0xb8, 0xe2, 0x52, 0xce, 0xdd, 0xc3, 0xcc, 0xa6, 0x6e,
	0x10, 0x6b, 0x5c, 0x16, 0x1a, 0xf5, 0xa9, 0xc9, 0x48, 0xe9, 0x2d, 0xb8, 0xd4, 0x75, 0x42, 0xc2,
	0x28, 0x65, 0x83, 0x58, 0xa1, 0x2e, 0x14, 0x6a, 0xf1, 0x44, 0x04, 0xfe, 0x04, 0x36, 0x78, 0x38,
	0x39, 0x41, 0x67, 0x48, 0x5d, 0x9b, 0x51, 0xdf, 0x76, 0xfb, 0xb1, 0xda, 0x15, 0xa1, 0xb6, 0x1e,
	0x41, 0xee, 0xc7, 0x88, 0x48, 0x7f, 0x0b, 0xca, 0x16, 0x19, 0x11, 0x87, 0x7a, 0x43, 0xe2, 0x32,
	0xfd, 0xaa, 0xc0, 0x27, 0x45, 0x3c, 0x81, 0x63, 0xdb, 0xd2, 0xd7, 0x64, 0x02, 0xc7, 0xb6, 0x85,
	0xee, 0x00, 0xf4, 0x44, 0xde, 0xb4, 0x3a, 0x98, 0xe9, 0xba, 0xba, 0x34, 0xb2, 0x69, 0x6b, 0x46,
	0x4d, 0x5b, 0xf3, 0x34, 0xea, 0xea, 0xcc, 0x92, 0x42, 0xb7, 0x18, 0x57, 0x0d, 0x45, 0xc9, 0x16,
	0xaa, 0xeb, 0x2f, 0x56, 0x55, 0xe8, 0x16, 0x33, 0x3e, 0x85, 0x4a, 0xb2, 0xe4, 0xa3, 0xf7, 0xa1,
	0x20, 0xea, 0x43, 0xa0, 0x6b, 0x22, 0xfb, 0x5f, 0x9b, 0xdf, 0x23, 0x98, 0x0a, 0x6d, 0xfc, 0xa6,
	0x41, 0x39, 0x21, 0x9f, 0x94, 0x23, 0xed, 0xa5, 0xca, 0x11, 0xba, 0x07, 0x65, 0xe9, 0x54, 0x87,
	0x8d, 0x3d, 0x22, 0xae, 0xe4, 0xca, 0xde, 0x9b, 0xf3, 0x8d, 0xab, 0x2e, 0xe9, 0x74, 0xec, 0x11,
	0x53, 0x6d, 0x00, 0xff, 0x36, 0x5a, 0x00, 0x93, 0x19, 0xb4, 0x0c, 0xb9, 0x93, 0xf6, 0x69, 0x6d,
	0x01, 0x01, 0x14, 0x0e, 0xda, 0xc7, 0xed, 0xd3, 0x76, 0x4d, 0x43, 0x25, 0xc8, 0xdf, 0x3d, 0x6e,
	0xb7, 0xcc, 0xda, 0x22, 0x9f, 0x6f, 0x1d, 0x1c, 0xd4, 0x72, 0x7c, 0xde, 0x6c, 0xdf, 0xff, 0xe2,
	0x49, 0xbb, 0xb6, 0x64, 0xfc, 0x91, 0x83, 0xbc, 0xb0, 0x84, 0x6e, 0x40, 0xb5, 0x4b, 0xa9, 0x43,
	0xb0, 0xdb, 0x99, 0x2c, 0xa8, 0x78, 0xb8, 0x60, 0x56, 0x94, 0x38, 0x86, 0xd9, 0x2e, 0x23, 0x7d,
	0xe2, 0x77, 0x26, 0x65, 0x38, 0xc7, 0x61, 0x4a, 0x2c, 0x61, 0xd7, 0xa1, 0x62, 0xd1, 0xb0, 0xeb,
	0x10, 0x85, 0xe2, 0xeb, 0xd4, 0x0e, 0x17, 0xcc, 0xb2, 0x94, 0xc6, 0xa0, 0x80, 0x89, 0x03, 0x27,
	0x41, 0x4b, 0xfc, 0x90, 0x70, 0x90, 0x94, 0x4a, 0x50, 0x0b, 0xca, 0xd8, 0xf7, 0xf1, 0x58, 0x61,
	0xf2, 0x62, 0x9b, 0x67, 0x46, 0xab, 0xd9, 0xe2, 0xd8, 0xc3, 0x05, 0x13, 0x84, 0x52, 0x44, 0x51,
	0x55, 0xe9, 0x42, 0x91, 0x14, 0x52, 0x99, 0x3a, 0x41, 0x22, 0x71, 0x7c, 0x3d, 0x4a, 0x45, 0x52,
	0xdc, 0x06, 0x70, 0x43, 0xc7, 0x51, 0xfa, 0x45, 0x11, 0xb5, 0xb5, 0x0c, 0xfd, 0x07, 0xa1, 0xe3,
	0x1c, 0x2e, 0x98, 0x25, 0x0e, 0x96, 0x9a, 0x6d, 0x58, 0x8d, 0x5f, 0x28, 0x4a, 0x7d, 0xf9, 0x45,
	0x07, 0xf7, 0x70, 0xc1, 0x5c, 0x89, 0x95, 0x04, 0x4d, 0xe3, 0x0e, 0xe4, 0xc5, 0xd2, 0xd0, 0xbb,
	0xa9, 0x83, 0x3b, 0xfb, 0xc4, 0x29, 0xdc, 0x7e, 0x05, 0x40, 0x7c, 0x89, 0x13, 0x67, 0xfc, 0xae,
	0xc1, 0x6a, 0xaa, 0xad, 0x49, 0x15, 0x10, 0x2d, 0x5d, 0x40, 0xd2, 0x95, 0xea, 0x7f, 0x50, 0x8a,
	0xfb, 0xa0, 0xa8, 0x50, 0xc5, 0x02, 0xf4, 0x1a, 0x54, 0xe3, 0x01, 0x3f, 0x98, 0x32, 0xac, 0xe6,
	0xb4, 0x10, 0x21, 0x58, 0xf2, 0x30, 0x1b, 0xa8, 0xba, 0x23, 0xbe, 0x53, 0x99, 0xa1, 0xfe, 0x0a,
	0x99, 0xc1, 0x78, 0x04, 0xcb, 0xc9, 0x02, 0x80, 0xbf, 0xa5, 0xbe, 0x5a, 0x87, 0x1c, 0x08, 0xa9,
	0xed, 0x52, 0x5f, 0x95, 0x47, 0x39, 0xe0, 0x05, 0xc8, 0x27, 0x23, 0x5b, 0x54, 0x92, 0x9c, 0x98,
	0x88, 0xc7, 0x37, 0x6b, 0xb0, 0xc4, 0xa3, 0x89, 0x8a, 0xb0, 0xf4, 0xe0, 0xf1, 0xf1, 0x71, 0x6d,
	0x61, 0xef, 0xcf, 0x02, 0x14, 0x5b, 0x6a, 0x9b, 0xd1, 0x29, 0x54, 0xa7, 0x5e, 0x8d, 0xe8, 0x8d,
	0x8c, 0x40, 0x64, 0xbd, 0x2b, 0x1b, 0x8d, 0xd9, 0xed, 0x31, 0x67, 0x9d, 0x7a, 0x34, 0x66, 0xb2,
	0x66, 0x3d, 0x2b, 0x5f, 0xc4, 0x3a, 0xf5, 0xd0, 0xca, 0x64, 0xcd, 0x7a, 0x8a, 0xcd, 0x65, 0xed,
	0x42, 0x3d, 0xeb, 0xa9, 0x84, 0x9a, 0x19, 0x3a, 0x73, 0xde, 0x54, 0x73, 0x6d, 0x7c, 0x03, 0xb5,
	0xf4, 0x9b, 0x08, 0xdd, 0x9c, 0xcb, 0x3f, 0xf5, 0x70, 0x6a, 0x6c, 0xcd, 0xe6, 0x56, 0x6c, 0x8f,
	0xa0, 0x92, 0x6c, 0xe3, 0xd1, 0xeb, 0x33, 0xc3, 0x38, 0xd5, 0x0e, 0x37, 0x66, 0xf7, 0xaf, 0x9c,
	0x32, 0xd9, 0xa4, 0x67, 0x52, 0x66, 0x74, 0xf1, 0xf3, 0x28, 0x3f, 0x87, 0x52, 0xdc, 0x90, 0xa3,
	0xeb, 0x59, 0x8b, 0x4a, 0xb5, 0xeb, 0xf3, 0xc8, 0x9e, 0x01, 0x7a, 0xbe, 0xad, 0x46, 0x6f, 0x67,
	0xbd, 0x7f, 0x66, 0x75, 0xdf, 0x8d, 0xab, 0xcf, 0xdd, 0xcb, 0xf6, 0xd0, 0x63, 0x63, 0xf4, 0x15,
	0xd4, 0xd2, 0xfd, 0x72, 0x66, 0xc0, 0x66, 0x34, 0xd5, 0x73, 0xdc, 0xde, 0xbf, 0xfa, 0xac, 0x9e,
	0xf8, 0x55, 0xf4, 0x51, 0xf4, 0xdd, 0x2d, 0x08, 0x17, 0x6e, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x95, 0xc8, 0x01, 0xb6, 0x49, 0x12, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event/v1/schema.proto

/*
Package schema is a generated protocol buffer package.

It is generated from these files:
	event/v1/schema.proto

It has these top-level messages:
	GetSchemaRequest
	GetSchemaResponse
	Scalar
	Array
	Complex
	Type
	EventSchema
*/
package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/roverplatform/rover/go/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Scalar_Type int32

const (
	Scalar_STRING    Scalar_Type = 0
	Scalar_NUMBER    Scalar_Type = 1
	Scalar_BOOLEAN   Scalar_Type = 2
	Scalar_TIMESTAMP Scalar_Type = 3
)

var Scalar_Type_name = map[int32]string{
	0: "STRING",
	1: "NUMBER",
	2: "BOOLEAN",
	3: "TIMESTAMP",
}
var Scalar_Type_value = map[string]int32{
	"STRING":    0,
	"NUMBER":    1,
	"BOOLEAN":   2,
	"TIMESTAMP": 3,
}

func (x Scalar_Type) String() string {
	return proto.EnumName(Scalar_Type_name, int32(x))
}
func (Scalar_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

//
// Request & Response
type GetSchemaRequest struct {
	SchemaId      int32 `protobuf:"varint,1,opt,name=schema_id,json=schemaId" json:"schema_id,omitempty"`
	SchemaVersion int32 `protobuf:"varint,2,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
}

func (m *GetSchemaRequest) Reset()                    { *m = GetSchemaRequest{} }
func (m *GetSchemaRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSchemaRequest) ProtoMessage()               {}
func (*GetSchemaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetSchemaRequest) GetSchemaId() int32 {
	if m != nil {
		return m.SchemaId
	}
	return 0
}

func (m *GetSchemaRequest) GetSchemaVersion() int32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

type GetSchemaResponse struct {
	Schema *EventSchema `protobuf:"bytes,1,opt,name=schema" json:"schema,omitempty"`
}

func (m *GetSchemaResponse) Reset()                    { *m = GetSchemaResponse{} }
func (m *GetSchemaResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSchemaResponse) ProtoMessage()               {}
func (*GetSchemaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetSchemaResponse) GetSchema() *EventSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

//
// Models
type Scalar struct {
	Type Scalar_Type `protobuf:"varint,1,opt,name=type,enum=rover.event.v1.Scalar_Type" json:"type,omitempty"`
}

func (m *Scalar) Reset()                    { *m = Scalar{} }
func (m *Scalar) String() string            { return proto.CompactTextString(m) }
func (*Scalar) ProtoMessage()               {}
func (*Scalar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Scalar) GetType() Scalar_Type {
	if m != nil {
		return m.Type
	}
	return Scalar_STRING
}

type Array struct {
	Subtype *Scalar `protobuf:"bytes,1,opt,name=subtype" json:"subtype,omitempty"`
}

func (m *Array) Reset()                    { *m = Array{} }
func (m *Array) String() string            { return proto.CompactTextString(m) }
func (*Array) ProtoMessage()               {}
func (*Array) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Array) GetSubtype() *Scalar {
	if m != nil {
		return m.Subtype
	}
	return nil
}

type Complex struct {
	Attributes map[string]*Type `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Complex) Reset()                    { *m = Complex{} }
func (m *Complex) String() string            { return proto.CompactTextString(m) }
func (*Complex) ProtoMessage()               {}
func (*Complex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Complex) GetAttributes() map[string]*Type {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Type struct {
	// Types that are valid to be assigned to Type:
	//	*Type_Scalar
	//	*Type_Array
	//	*Type_Complex
	Type isType_Type `protobuf_oneof:"type"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isType_Type interface{ isType_Type() }

type Type_Scalar struct {
	Scalar *Scalar `protobuf:"bytes,1,opt,name=scalar,oneof"`
}
type Type_Array struct {
	Array *Array `protobuf:"bytes,2,opt,name=array,oneof"`
}
type Type_Complex struct {
	Complex *Complex `protobuf:"bytes,3,opt,name=complex,oneof"`
}

func (*Type_Scalar) isType_Type()  {}
func (*Type_Array) isType_Type()   {}
func (*Type_Complex) isType_Type() {}

func (m *Type) GetType() isType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Type) GetScalar() *Scalar {
	if x, ok := m.GetType().(*Type_Scalar); ok {
		return x.Scalar
	}
	return nil
}

func (m *Type) GetArray() *Array {
	if x, ok := m.GetType().(*Type_Array); ok {
		return x.Array
	}
	return nil
}

func (m *Type) GetComplex() *Complex {
	if x, ok := m.GetType().(*Type_Complex); ok {
		return x.Complex
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Type) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Type_OneofMarshaler, _Type_OneofUnmarshaler, _Type_OneofSizer, []interface{}{
		(*Type_Scalar)(nil),
		(*Type_Array)(nil),
		(*Type_Complex)(nil),
	}
}

func _Type_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Type)
	// type
	switch x := m.Type.(type) {
	case *Type_Scalar:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Scalar); err != nil {
			return err
		}
	case *Type_Array:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Array); err != nil {
			return err
		}
	case *Type_Complex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Complex); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Type.Type has unexpected type %T", x)
	}
	return nil
}

func _Type_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Type)
	switch tag {
	case 1: // type.scalar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Scalar)
		err := b.DecodeMessage(msg)
		m.Type = &Type_Scalar{msg}
		return true, err
	case 2: // type.array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Array)
		err := b.DecodeMessage(msg)
		m.Type = &Type_Array{msg}
		return true, err
	case 3: // type.complex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Complex)
		err := b.DecodeMessage(msg)
		m.Type = &Type_Complex{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Type_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Type)
	// type
	switch x := m.Type.(type) {
	case *Type_Scalar:
		s := proto.Size(x.Scalar)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_Array:
		s := proto.Size(x.Array)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_Complex:
		s := proto.Size(x.Complex)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventSchema struct {
	Id              int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Version         int32                      `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	AccountId       int32                      `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Namespace       string                     `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	Name            string                     `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	AttributeSchema *Complex                   `protobuf:"bytes,6,opt,name=attribute_schema,json=attributeSchema" json:"attribute_schema,omitempty"`
	CreatedAt       *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *EventSchema) Reset()                    { *m = EventSchema{} }
func (m *EventSchema) String() string            { return proto.CompactTextString(m) }
func (*EventSchema) ProtoMessage()               {}
func (*EventSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EventSchema) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventSchema) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *EventSchema) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *EventSchema) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EventSchema) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventSchema) GetAttributeSchema() *Complex {
	if m != nil {
		return m.AttributeSchema
	}
	return nil
}

func (m *EventSchema) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*GetSchemaRequest)(nil), "rover.event.v1.GetSchemaRequest")
	proto.RegisterType((*GetSchemaResponse)(nil), "rover.event.v1.GetSchemaResponse")
	proto.RegisterType((*Scalar)(nil), "rover.event.v1.Scalar")
	proto.RegisterType((*Array)(nil), "rover.event.v1.Array")
	proto.RegisterType((*Complex)(nil), "rover.event.v1.Complex")
	proto.RegisterType((*Type)(nil), "rover.event.v1.Type")
	proto.RegisterType((*EventSchema)(nil), "rover.event.v1.EventSchema")
	proto.RegisterEnum("rover.event.v1.Scalar_Type", Scalar_Type_name, Scalar_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Schema service

type SchemaClient interface {
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
}

type schemaClient struct {
	cc *grpc.ClientConn
}

func NewSchemaClient(cc *grpc.ClientConn) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := grpc.Invoke(ctx, "/rover.event.v1.Schema/GetSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Schema service

type SchemaServer interface {
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
}

func RegisterSchemaServer(s *grpc.Server, srv SchemaServer) {
	s.RegisterService(&_Schema_serviceDesc, srv)
}

func _Schema_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rover.event.v1.Schema/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schema_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rover.event.v1.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchema",
			Handler:    _Schema_GetSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/v1/schema.proto",
}

func init() { proto.RegisterFile("event/v1/schema.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x5f, 0x8f, 0xd2, 0x40,
	0x10, 0xa7, 0x05, 0x8a, 0x9d, 0xe6, 0xb8, 0x3a, 0xf1, 0xb4, 0xe1, 0x34, 0x9e, 0x4d, 0x8c, 0x17,
	0x13, 0xdb, 0x3b, 0xee, 0xc5, 0x3b, 0x9f, 0xc0, 0x10, 0x20, 0x11, 0xce, 0x2c, 0x78, 0x0f, 0xc6,
	0x84, 0x2c, 0x65, 0x3d, 0x89, 0xd0, 0xd6, 0x76, 0xdb, 0xc8, 0x27, 0xf0, 0x8b, 0x98, 0xf8, 0x35,
	0x4d, 0x77, 0x4b, 0xe5, 0xaa, 0xf2, 0x36, 0x3b, 0xf3, 0xfb, 0xcd, 0xec, 0xfc, 0xf9, 0xc1, 0x11,
	0x4b, 0x99, 0xcf, 0xdd, 0xf4, 0xdc, 0x8d, 0xbd, 0x2f, 0x6c, 0x4d, 0x9d, 0x30, 0x0a, 0x78, 0x80,
	0xcd, 0x28, 0x48, 0x59, 0xe4, 0x88, 0xa0, 0x93, 0x9e, 0xb7, 0x9e, 0xde, 0x06, 0xc1, 0xed, 0x8a,
	0xb9, 0x22, 0x3a, 0x4f, 0x3e, 0xbb, 0x7c, 0xb9, 0x66, 0x31, 0xa7, 0xeb, 0x50, 0x12, 0xec, 0x1b,
	0x30, 0xfb, 0x8c, 0x4f, 0x44, 0x0e, 0xc2, 0xbe, 0x25, 0x2c, 0xe6, 0x78, 0x0c, 0xba, 0x4c, 0x3a,
	0x5b, 0x2e, 0x2c, 0xe5, 0x44, 0x39, 0xad, 0x93, 0x7b, 0xd2, 0x31, 0x5c, 0xe0, 0x73, 0x68, 0xe6,
	0xc1, 0x94, 0x45, 0xf1, 0x32, 0xf0, 0x2d, 0x55, 0x20, 0x0e, 0xa4, 0xf7, 0x46, 0x3a, 0xed, 0x01,
	0xdc, 0xdf, 0xc9, 0x1b, 0x87, 0x81, 0x1f, 0x33, 0xbc, 0x00, 0x4d, 0xa2, 0x44, 0x56, 0xa3, 0x7d,
	0xec, 0xdc, 0xfd, 0xae, 0xd3, 0xcb, 0x8c, 0x9c, 0x94, 0x43, 0xed, 0x04, 0xb4, 0x89, 0x47, 0x57,
	0x34, 0x42, 0x17, 0x6a, 0x7c, 0x13, 0x32, 0x41, 0x6e, 0xfe, 0x4d, 0x96, 0x28, 0x67, 0xba, 0x09,
	0x19, 0x11, 0x40, 0xfb, 0x0a, 0x6a, 0xd9, 0x0b, 0x01, 0xb4, 0xc9, 0x94, 0x0c, 0xc7, 0x7d, 0xb3,
	0x92, 0xd9, 0xe3, 0x0f, 0xa3, 0x6e, 0x8f, 0x98, 0x0a, 0x1a, 0xd0, 0xe8, 0x5e, 0x5f, 0xbf, 0xeb,
	0x75, 0xc6, 0xa6, 0x8a, 0x07, 0xa0, 0x4f, 0x87, 0xa3, 0xde, 0x64, 0xda, 0x19, 0xbd, 0x37, 0xab,
	0xf6, 0x25, 0xd4, 0x3b, 0x51, 0x44, 0x37, 0x78, 0x06, 0x8d, 0x38, 0x99, 0x17, 0x85, 0x8d, 0xf6,
	0xc3, 0x7f, 0x17, 0x26, 0x5b, 0x98, 0xfd, 0x4b, 0x81, 0xc6, 0xdb, 0x60, 0x1d, 0xae, 0xd8, 0x77,
	0xec, 0x03, 0x50, 0xce, 0xa3, 0xe5, 0x3c, 0xe1, 0x2c, 0xb6, 0x94, 0x93, 0xea, 0xa9, 0xd1, 0x7e,
	0x51, 0x4e, 0x90, 0x83, 0x9d, 0x4e, 0x81, 0xec, 0xf9, 0x3c, 0xda, 0x90, 0x1d, 0x6a, 0x6b, 0x02,
	0x87, 0xa5, 0x30, 0x9a, 0x50, 0xfd, 0xca, 0x36, 0xe2, 0x57, 0x3a, 0xc9, 0x4c, 0x7c, 0x09, 0xf5,
	0x94, 0xae, 0x12, 0x26, 0x76, 0x62, 0xb4, 0x1f, 0x94, 0x0b, 0x89, 0xd9, 0x48, 0xc8, 0x95, 0xfa,
	0x5a, 0xb1, 0x7f, 0x2a, 0xf9, 0x84, 0xce, 0xb2, 0xcd, 0x64, 0x5d, 0xec, 0xef, 0x71, 0x50, 0x21,
	0x39, 0x0e, 0x5f, 0x41, 0x9d, 0x66, 0xf3, 0xc9, 0x4b, 0x1d, 0x95, 0x09, 0x62, 0x78, 0x83, 0x0a,
	0x91, 0x28, 0xbc, 0x80, 0x86, 0x27, 0xbb, 0xb4, 0xaa, 0x82, 0xf0, 0xe8, 0x3f, 0x43, 0x18, 0x54,
	0xc8, 0x16, 0xd9, 0xd5, 0xe4, 0xc2, 0xed, 0x1f, 0x2a, 0x18, 0x3b, 0xa7, 0x81, 0x4d, 0x50, 0x8b,
	0xcb, 0x54, 0x97, 0x0b, 0xb4, 0xa0, 0x71, 0xf7, 0x18, 0xb7, 0x4f, 0x7c, 0x02, 0x40, 0x3d, 0x2f,
	0x48, 0x7c, 0x9e, 0xdd, 0x72, 0x55, 0x04, 0xf5, 0xdc, 0x33, 0x5c, 0xe0, 0x63, 0xd0, 0x7d, 0xba,
	0x66, 0x71, 0x48, 0x3d, 0x66, 0xd5, 0xc4, 0x1c, 0xff, 0x38, 0x10, 0xa1, 0x96, 0x3d, 0xac, 0xba,
	0x08, 0x08, 0x1b, 0xbb, 0x60, 0x16, 0x4b, 0x99, 0xe5, 0xc7, 0xac, 0xed, 0x6d, 0x88, 0x1c, 0x16,
	0x84, 0xfc, 0xfb, 0x97, 0x00, 0x5e, 0xc4, 0x28, 0x67, 0x8b, 0x19, 0xe5, 0x96, 0x2e, 0xd8, 0x2d,
	0x47, 0x2a, 0xd5, 0xd9, 0x2a, 0xd5, 0x99, 0x6e, 0x95, 0x4a, 0xf4, 0x1c, 0xdd, 0xe1, 0xed, 0x4f,
	0x99, 0x18, 0x44, 0x12, 0x02, 0x7a, 0x21, 0x30, 0x3c, 0x29, 0xd7, 0x2e, 0x6b, 0xba, 0xf5, 0x6c,
	0x0f, 0x42, 0xaa, 0xd3, 0xae, 0x74, 0xf1, 0xa3, 0x29, 0x5b, 0x72, 0xd3, 0xf3, 0x37, 0xd2, 0x9a,
	0x6b, 0xe2, 0x43, 0x17, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x84, 0xe7, 0x77, 0x71, 0x04,
	0x00, 0x00,
}

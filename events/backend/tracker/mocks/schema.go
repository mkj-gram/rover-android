// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/roverplatform/rover/events/backend/tracker (interfaces: SchemaStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	schema "github.com/roverplatform/rover/events/backend/schema"
)

// MockSchemaRepository is a mock of SchemaStore interface
type MockSchemaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRepositoryMockRecorder
}

// MockSchemaRepositoryMockRecorder is the mock recorder for MockSchemaRepository
type MockSchemaRepositoryMockRecorder struct {
	mock *MockSchemaRepository
}

// NewMockSchemaRepository creates a new mock instance
func NewMockSchemaRepository(ctrl *gomock.Controller) *MockSchemaRepository {
	mock := &MockSchemaRepository{ctrl: ctrl}
	mock.recorder = &MockSchemaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchemaRepository) EXPECT() *MockSchemaRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSchemaRepository) Create(arg0 context.Context, arg1 schema.EventSchema) (*schema.EventSchema, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*schema.EventSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSchemaRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSchemaRepository)(nil).Create), arg0, arg1)
}

// FindLastByEvent mocks base method
func (m *MockSchemaRepository) FindLastByEvent(arg0 context.Context, arg1 int32, arg2, arg3 string) (*schema.EventSchema, error) {
	ret := m.ctrl.Call(m, "FindLastByEvent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*schema.EventSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByEvent indicates an expected call of FindLastByEvent
func (mr *MockSchemaRepositoryMockRecorder) FindLastByEvent(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByEvent", reflect.TypeOf((*MockSchemaRepository)(nil).FindLastByEvent), arg0, arg1, arg2, arg3)
}

// UpdateAttributeSchema mocks base method
func (m *MockSchemaRepository) UpdateAttributeSchema(arg0 context.Context, arg1 schema.EventSchema, arg2 map[string]schema.Type) (*schema.EventSchema, error) {
	ret := m.ctrl.Call(m, "UpdateAttributeSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(*schema.EventSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttributeSchema indicates an expected call of UpdateAttributeSchema
func (mr *MockSchemaRepositoryMockRecorder) UpdateAttributeSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttributeSchema", reflect.TypeOf((*MockSchemaRepository)(nil).UpdateAttributeSchema), arg0, arg1, arg2)
}

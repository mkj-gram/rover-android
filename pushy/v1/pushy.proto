syntax = "proto3";

package rover.pushy.v1;

import "common/v1/response.proto";


message Device {
    
    enum Platform {
        IOS = 0;
        ANDROID = 1;
    }

    // The internal id of the device
    string id = 1;

    // The token used for push
    string token = 2;

    // Used to tie the device to a platform
    int32 account_id = 3;

    // Used in special cases where a universal platform is needed
    string app_identifier = 4;

    // Which service to use to send to a notification to a device
    Platform platform = 5; 

}

message IosPlatform {
    int32 id = 1;
    int32 account_id = 2;
    string bundle_id = 3;
    string certificate_password = 4;
    string certifcate = 5;
}

message AndroidPlatform {
    int32 id = 1;
    int32 account_id = 2;
    string package_name = 3;

    string sender_id = 4;
    string messaging_token = 5;
    string api_key = 6;
}



message GetDeviceRequest {
    // lookup device by token
    string id = 1;
}

message GetDeviceResponse {
    Device device = 1;
}

message CreateDeviceRequest {
    Device device = 1;
}

message CreateDeviceResponse {
    common.v1.OperationResult result = 1;
    Device device = 2;
}

message DeleteDeviceRequest {
    string id = 1;
}

message DeleteDeviceResponse {
    common.v1.OperationResult result = 1;
}

message UpdateDeviceRequest {
    string id = 1;
    Device device = 2;
}

message UpdateDeviceResponse {
    common.v1.OperationResult result = 1;
}


/*
     IosPlatform Crud Calls
*/

message GetIosPlatformRequest {
    int32 id = 1;
}

message GetIosPlatformResponse {
    common.v1.OperationResult result = 1;
    IosPlatform ios_platform = 2;
}

message CreateIosPlatformRequest {
    IosPlatform ios_platform = 1;
}

message CreateIosPlatformResponse {
    common.v1.OperationResult result = 1;
    IosPlatform ios_platform = 2;
}

//
// Delete Ios Platform
//
message DeleteIosPlatformRequest {
    int32 id = 1;
}

message DeleteIosPlatformResponse {
    common.v1.OperationResult result = 1;
}

//
// Update Ios Platform
// 
message UpdateIosPlatformRequest {
    int32 id = 1;
    IosPlatform platform = 2;
}

message UpdateIosPlatformResponse {
    common.v1.OperationResult result = 1;
    IosPlatform platform = 2;
}


/*
     AndroidPlatform Crud Calls
*/
message GetAndroidPlatformRequest {
    int32 id = 1;
}

message GetAndroidPlatformResponse {
    common.v1.OperationResult result = 1;
    AndroidPlatform platform = 2;
}

message CreateAndroidPlatformRequest {
    AndroidPlatform platform = 1;
}

message CreateAndroidPlatformResponse {
    common.v1.OperationResult result = 1;
    AndroidPlatform platform = 2;
}

//
// Delete Android Platform
//
message DeleteAndroidPlatformRequest {
    int32 id = 1;
}

message DeleteAndroidPlatformResponse {
    common.v1.OperationResult result = 1;
}

//
// Update Android Platform
// 
message UpdateAndroidPlatformRequest {
    int32 id = 1;
    AndroidPlatform platform = 2;
}

message UpdateAndroidPlatformResponse {
    common.v1.OperationResult result = 1;
    AndroidPlatform platform = 2;
}



message SendNotificationRequest {
    
    string id = 1;

    // The device id to send to
    string to = 2;

    // The notification text
    string notification_text = 3;
    string title = 4;
    string sound = 5;
    int32 badge = 6;
    string priority = 7;
    string collapse_key = 8;

    // The json embedded in the payload
    string payload = 9;

    // ios options
    bool content_available = 10;
    bool mutable_content = 11;

    int32 time_to_live = 12;
}

message SendNotificationResponse {
    common.v1.OperationResult result = 1;
}

message SendNotificationResult {
    common.v1.OperationResult result = 1;

    // Array of notification ids that have succeeded
    repeated string success_ids = 2;

    // Array of notification ids that have failed
    repeated string failed_ids = 3;
}


service PushyService {
    
    // push
    rpc SendNotification(SendNotificationRequest)   returns (SendNotificationResponse) {};
    rpc SendNotifications(stream SendNotificationRequest) returns (SendNotificationResult) {};
    
    // Device rpc crud calls
    rpc GetDevice(GetDeviceRequest)         returns (GetDeviceResponse) {};
    rpc CreateDevice(CreateDeviceRequest)   returns (CreateDeviceResponse) {};
    rpc DeleteDevice(DeleteDeviceRequest)   returns (DeleteDeviceResponse) {};
    rpc UpdateDevice(UpdateDeviceRequest)   returns (UpdateDeviceResponse) {};


    // ios platform crud calls
    rpc GetIosPlatform(GetIosPlatformRequest)       returns (GetIosPlatformResponse) {};
    rpc CreateIosPlatform(CreateIosPlatformRequest) returns (CreateIosPlatformResponse) {};
    rpc DeleteIosPlatform(DeleteIosPlatformRequest) returns (DeleteIosPlatformResponse) {};
    rpc UpdateIosPlatform(UpdateIosPlatformRequest) returns (UpdateIosPlatformResponse) {};


    // android platform crud calls
    rpc GetAndroidPlatform(GetAndroidPlatformRequest)       returns (GetAndroidPlatformResponse) {};
    rpc CreateAndroidPlatform(CreateAndroidPlatformRequest) returns (CreateAndroidPlatformResponse) {};
    rpc DeleteAndroidPlatform(DeleteAndroidPlatformRequest) returns (DeleteAndroidPlatformResponse) {};
    rpc UpdateAndroidPlatform(UpdateAndroidPlatformRequest) returns (UpdateAndroidPlatformResponse) {};

}
syntax = "proto3";

package rover.audience.v1;

option go_package = "audience/v1;audience";

import "google/protobuf/timestamp.proto";

import "auth/v1/auth.proto";

// Audience service is responsible for managing profiles & devices as well as static & dynamic segments.
service Audience {

  //
  // Profiles
  //

  // CreateProfile creates a new empty profile under a given account.
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse);
  rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse);
  //  DeleteProfile deletes a profile from db and all segments
  rpc DeleteProfile(DeleteProfileRequest) returns (DeleteProfileResponse);
  // UpdateProfile updates profile with provided subset of attributes
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse);
  rpc UpdateProfileIdentifier(UpdateProfileIdentifierRequest) returns (UpdateProfileIdentifierResponse);

  // GetProfileByDeviceId returns a profile which is associated to the device id
  rpc GetProfileByDeviceId(GetProfileByDeviceIdRequest) returns (GetProfileByDeviceIdResponse);
  rpc GetProfileByIdentifier(GetProfileByIdentifierRequest) returns (GetProfileByIdentifierResponse);

  rpc ListProfilesByIds(ListProfilesByIdsRequest) returns (ListProfilesByIdsResponse);

  // GetProfileSchema returns the currently tracked profiles schema by account id
  rpc GetProfileSchema(GetProfileSchemaRequest) returns (GetProfileSchemaResponse);

  //
  // Devices
  //

  // GetDevice returns the device for a given device id
  rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse);
  rpc GetDeviceByPushToken(GetDeviceByPushTokenRequest) returns (GetDeviceByPushTokenResponse);

  rpc CreateDevice(CreateDeviceRequest) returns (CreateDeviceResponse);

  // Device Updates
  rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse);
  rpc UpdateDevicePushToken(UpdateDevicePushTokenRequest) returns (UpdateDevicePushTokenResponse);
  rpc UpdateDeviceUnregisterPushToken(UpdateDeviceUnregisterPushTokenRequest) returns (UpdateDeviceUnregisterPushTokenResponse);
  rpc UpdateDeviceLocation(UpdateDeviceLocationRequest) returns (UpdateDeviceLocationResponse);
  rpc UpdateDeviceGeofenceMonitoring(UpdateDeviceGeofenceMonitoringRequest) returns (UpdateDeviceGeofenceMonitoringResponse);
  rpc UpdateDeviceIBeaconMonitoring(UpdateDeviceIBeaconMonitoringRequest) returns (UpdateDeviceIBeaconMonitoringResponse);
  // Test devices
  rpc UpdateDeviceTestProperty(UpdateDeviceTestPropertyRequest) returns (UpdateDeviceTestPropertyResponse);

  // Lists
  rpc ListDevicesByProfileId(ListDevicesByProfileIdRequest) returns (ListDevicesByProfileIdResponse);
  rpc ListDevicesByProfileIdentifier(ListDevicesByProfileIdentifierRequest) returns (ListDevicesByProfileIdentifierResponse);

  // SetDeviceProfile sets the profile the device belongs to
  rpc SetDeviceProfile(SetDeviceProfileRequest) returns (SetDeviceProfileResponse);

  // DeleteDevice deletes device from the database and removes it from any segments
  rpc DeleteDevice(DeleteDeviceRequest) returns (DeleteDeviceResponse);


  //
  // DynamicSegments
  //

  // CreateDynamicSegment creates a new static segment by account_id and a title
  rpc CreateDynamicSegment(CreateDynamicSegmentRequest) returns (CreateDynamicSegmentResponse);

  // GetDynamicSegmentById returns a single static segment by id
  rpc GetDynamicSegmentById(GetDynamicSegmentByIdRequest) returns (GetDynamicSegmentByIdResponse);

  rpc UpdateDynamicSegmentTitle(UpdateDynamicSegmentTitleRequest) returns (UpdateDynamicSegmentTitleResponse);
  rpc UpdateDynamicSegmentPredicates(UpdateDynamicSegmentPredicatesRequest) returns (UpdateDynamicSegmentPredicatesResponse);

  // ArchiveDynamicSegmentById archive a segment given an id
  rpc ArchiveDynamicSegmentById(ArchiveDynamicSegmentByIdRequest) returns (ArchiveDynamicSegmentByIdResponse);

  // ListDynamicSegments returns a list of static segments by account_id.
  rpc ListDynamicSegments(ListDynamicSegmentsRequest) returns(ListDynamicSegmentsResponse);
}


//
// Profile
//


message GetProfileRequest {
  auth.v1.AuthContext auth_context = 1;
  string profile_id = 2;
}
message GetProfileResponse {
  Profile profile = 1;
}


message CreateProfileRequest {
  auth.v1.AuthContext auth_context = 1;
}
message CreateProfileResponse {
  Profile profile = 1;
}


message DeleteProfileRequest {
  auth.v1.AuthContext auth_context = 1;
  string profile_id = 2;
}
message DeleteProfileResponse {}


message UpdateProfileRequest {
  auth.v1.AuthContext auth_context = 1;
  string profile_id = 2;
  map<string, ValueUpdates> attributes = 5;
}
message UpdateProfileResponse {}


message UpdateProfileIdentifierRequest {
  auth.v1.AuthContext auth_context = 1;
  // profile to set identifier on
  string profile_id = 2;
  // the identifier value to set the identifier to
  string identifier = 3;
}
message UpdateProfileIdentifierResponse {}


message GetProfileByDeviceIdRequest {
  auth.v1.AuthContext auth_context = 1;
  string device_id = 2;
}
message GetProfileByDeviceIdResponse {
  Profile profile = 1;
}


message GetProfileByIdentifierRequest {
  auth.v1.AuthContext auth_context = 1;
  string identifier = 2;
}
message GetProfileByIdentifierResponse {
  Profile profile = 1;
}


message ListProfilesByIdsRequest {
  auth.v1.AuthContext auth_context = 1;

  repeated string profile_ids = 2;
}
message ListProfilesByIdsResponse {
  repeated Profile profiles = 2;
}


message GetProfileSchemaRequest {
  auth.v1.AuthContext auth_context = 1;
}
message GetProfileSchemaResponse {
  ProfileSchema schema = 1;
}


// Profile represents a variable set of a user attributes that customer pushes to Rover.
// It can be thought as a flat JSON object of simple key-value pairs ( There is no nesting of attributes )
message Profile {
  string id  = 1;
  int32 account_id = 2;
  // identifier represents an id used by customers to map back this profile to their data
  string identifier = 3;


  // profile attributes
  map<string, Value> attributes = 4;

  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}


// ProfileSchema describes profiles' schema with the collection of SchemaAttribute descriptors
message ProfileSchema {
  repeated SchemaAttribute attributes = 10;
}

//
// Device
//

message GetDeviceRequest {
  auth.v1.AuthContext auth_context = 1;
  string device_id = 2;
}
message GetDeviceResponse {
  Device device = 1;
}


message GetDeviceByPushTokenRequest {
  auth.v1.AuthContext auth_context = 1;
  string push_token_key = 2;
}
message GetDeviceByPushTokenResponse {
  Device device = 1;
}


message CreateDeviceRequest {
  auth.v1.AuthContext auth_context = 1;
  string profile_id                = 2;
  string device_id                 = 3;
}
message CreateDeviceResponse {}

message UpdateDevicePushTokenRequest {
  auth.v1.AuthContext auth_context = 1;

  string device_id        = 2;

  string push_token_key = 3;
  string push_environment  = 4;
}
message UpdateDevicePushTokenResponse {}

message UpdateDeviceUnregisterPushTokenRequest {
  auth.v1.AuthContext auth_context = 1;
  string device_id        = 2;
}
message UpdateDeviceUnregisterPushTokenResponse {}

message UpdateDeviceLocationRequest {
  auth.v1.AuthContext auth_context = 1;

  string device_id                    = 2;

  int32  location_accuracy            = 3;
  double location_latitude            = 4;
  double location_longitude           = 5;
}
message UpdateDeviceLocationResponse {}

message UpdateDeviceGeofenceMonitoringRequest {
  auth.v1.AuthContext auth_context = 1;

  string device_id = 2;

  repeated GeofenceRegion regions = 3;
}
message UpdateDeviceGeofenceMonitoringResponse {}


message UpdateDeviceIBeaconMonitoringRequest {
  auth.v1.AuthContext auth_context = 1;
  string device_id = 2;
  repeated IBeaconRegion regions = 3;
}
message UpdateDeviceIBeaconMonitoringResponse {}


message UpdateDeviceTestPropertyRequest {
  auth.v1.AuthContext auth_context = 1;
  string device_id = 2;
  bool is_test_device = 3;
}
message UpdateDeviceTestPropertyResponse {}


message DeleteDeviceRequest {
  auth.v1.AuthContext auth_context = 1;
  string device_id = 2;
}
message DeleteDeviceResponse {}


message SetDeviceProfileRequest {
  auth.v1.AuthContext auth_context = 1;

  string device_id = 2;
  string profile_id = 3;
}
message SetDeviceProfileResponse {}


message ListDevicesByProfileIdRequest {
  auth.v1.AuthContext auth_context = 1;
  string profile_id = 2;
}
message ListDevicesByProfileIdResponse {
  repeated Device devices = 1;
}


message ListDevicesByProfileIdentifierRequest {
  auth.v1.AuthContext auth_context = 1;
  string identifier = 2;
}
message ListDevicesByProfileIdentifierResponse {
  repeated Device devices = 1;
}


// Every event comes with DeviceContext populated
message UpdateDeviceRequest {
  auth.v1.AuthContext auth_context = 1;

  string device_id = 2;

  string push_environment              = 10;
  string push_token_key             = 11;
  string app_name                     = 12;
  string app_version                  = 13;
  string app_build                    = 14;
  string app_namespace                = 15;
  string device_manufacturer          = 16;
  string os_name                      = 17;
  Version os_version                  = 18;
  string device_model                 = 19;
  map<string, Version> frameworks     = 20;
  string locale_language              = 21;
  string locale_region                = 22;
  string locale_script                = 23;
  bool is_wifi_enabled                = 24;
  bool is_cellular_enabled            = 25;
  int32 screen_width                  = 26;
  int32 screen_height                 = 27;
  string carrier_name                 = 28;
  string radio                        = 29;
  string time_zone                    = 30;
  Platform platform                   = 31;
  bool is_background_enabled          = 32;
  bool is_location_monitoring_enabled = 33;
  bool is_bluetooth_enabled           = 34;
  string advertising_id               = 35;
  string ip                           = 36;

  Device.RegionMonitoringMode region_monitoring_mode = 37;
}
message UpdateDeviceResponse { }


// Devices represent a single device that the Rover sdk is installed on. The
// currently supported platforms are iOS,  Android, and Web. A device is the
// last state that the sdk reported to the server. Only the device itself is
// allowed to update its state no one elses.
message Device {

  // db id
  string id                            = 1;

  // device id: unique per account
  string device_id                     = 2;

  // the account_id the device belongs to
  int32 account_id                     = 3;

  // the profile id the device belongs to
  // hex encoded 12 bytes value
  string profile_id                    = 4;

  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;

  bool is_test_device = 7;

  // Attributes

  // A string equal to either "development" or "production" which indicates the
  // envrionment the app was built on and used by the server to determine which
  // APNS API to use.
  string push_environment = 10;

  // the token key value
  string push_token_key             = 11;

  bool push_token_is_active       = 12;
  google.protobuf.Timestamp push_token_created_at = 13;
  google.protobuf.Timestamp push_token_updated_at = 14;
  google.protobuf.Timestamp push_token_unregistered_at = 15;


  // The name of the application. E.g. "Air Miles"
  string app_name                 = 16;

  // The version of the application. E.g. "1.0"
  string app_version              = 17;

  // The build number of the application. E.g. "55". On iOS the build number
  // increases each time a build is submitted to the app store for testing.
  // For the same version number there are often multiple builds.
  string app_build                = 18;

  // The app developer's unique namespace. E.g. "com.airmiles".
  string app_namespace            = 19;

  // For iOS this will also be Apple and on Android could be
  // Samsung, LG etc.
  string device_manufacturer      = 20;

  // E.g. "iPhone9,2" or "Galaxy4"
  string device_model              = 23;

  // Either "iOS" or "Android"
  string os_name                  = 21;

  // The version of iOS or Android running on the device.
  Version os_version              = 22;

  // An dictionary of Rover framework names mapped to versions. 
  //  E.g. { "RoverEvents": "1.2.1", "RoverPush": "1.0.3" }
  map<string, Version> frameworks = 24;

  // E.g. "en"
  string locale_language          = 25;

  // E.g. "US"
  string locale_region            = 26;

  // Used mostly in Chinese languages... another 2-character code.
  string locale_script            = 27;

  // Boolean indicates if WiFi is turned on and has signal.
  bool is_wifi_enabled            = 28;

  // Boolean indicates if cell radio is on and has signal.
  bool is_cellular_enabled        = 29;

  // Resolution of the screen in points or DPI
  int32 screen_width             = 30;

  // Resolution of the screen in points or DPI
  int32 screen_height            = 31;

  // The name of the cellular provider. E.g. "Rogers" or "Verizon".
  string carrier_name             = 32;

  // The type of cell radio. E.g. "3G" or "LTE".
  string radio                    = 33;

  // The current device time zone. E.g. "America/Toronto".
  string time_zone                    = 34;

  Platform platform                   = 35;

  bool is_background_enabled          = 36;
  bool is_location_monitoring_enabled = 37;
  bool is_bluetooth_enabled           = 38;

  string advertising_id               = 39;

  // ip address
  string ip                           = 40;

  // End Attributes

  // Location
  int32  location_accuracy            = 41;
  double location_latitude            = 42;
  double location_longitude           = 43;
  string location_region              = 44;
  string location_city                = 45;
  string location_street              = 46;

  enum RegionMonitoringMode {
    UNDEFINED = 0;
    ROVER = 1;
    GIMBAL = 2;
  }

  RegionMonitoringMode region_monitoring_mode = 47;

  google.protobuf.Timestamp ibeacon_monitoring_regions_updated_at = 48;
  repeated IBeaconRegion ibeacon_monitoring_regions = 49;

  google.protobuf.Timestamp geofence_monitoring_regions_updated_at = 50;
  repeated GeofenceRegion geofence_monitoring_regions = 51;
}


enum Platform {
  UNDEFINED = 0;
  MOBILE    = 1;
  WEB       = 2;
}

message IBeaconRegion {
  string uuid = 1;
  int32 major = 2;
  int32 minor = 3;
}

message GeofenceRegion {
  string id        = 1;
  double latitude  = 2;
  double longitude = 3;
  int32 radius     = 4;
}

//
// Value
//

// ValueUpdates allows bulk updates as adding/removing tags in the same call
message ValueUpdates {
  repeated ValueUpdate values = 1;
}

// ValueUpdate represents a change that needs to be applied to already existing value
message ValueUpdate {
  UpdateType update_type = 1;
  Value value = 2;

  // UpdateType describes possible updates
  enum UpdateType {
    SET = 0;
    // ADD and REMOVE are for array[string]
    ADD = 3;
    REMOVE = 4;
  }
}

// Value represents supported value types the system accepts
message Value {
  message StringArray {
    repeated string values = 1;
  }

  oneof value_type {

    bool boolean_value = 1;
    int64 integer_value = 2;
    double double_value = 3;
    string string_value = 4;

    StringArray string_array_value = 5;

    Null null_value = 7;

    google.protobuf.Timestamp timestamp_value = 8;
  }
}

//
// Schema
//


// SchemaAttribute describes type information about an attribute
message SchemaAttribute {
  int32 account_id = 1;
  // attribute id
  string id = 2;
  // attribute name
  string attribute = 3;
  // attribute type descriptor, ie string/array[string]
  // see Value for all possible types
  string attribute_type = 4;

  // attribute path if nested
  string path = 5;

  // attribute creation time
  google.protobuf.Timestamp created_at = 10;
}


//
// Version
//

message Version {
  int32 major = 1;
  int32 minor = 2;
  /* optional */
  int32 revision = 3;
}

//
// Null
//

enum Null {
  // Null value.
  NULL = 0;
}



//
// DynamicSegments
//

message CreateDynamicSegmentRequest {
  auth.v1.AuthContext auth_context = 1;
  string title = 2;
}
message CreateDynamicSegmentResponse {
  DynamicSegment segment = 1;
}


message GetDynamicSegmentByIdRequest {
  auth.v1.AuthContext auth_context = 1;
  string segment_id = 2;
}
message GetDynamicSegmentByIdResponse {
  DynamicSegment segment = 1;
}

message UpdateDynamicSegmentTitleRequest {
  auth.v1.AuthContext auth_context = 1;
  string segment_id = 2;

  string title = 3;
}
message UpdateDynamicSegmentTitleResponse {}


message UpdateDynamicSegmentPredicatesRequest {
  auth.v1.AuthContext auth_context = 1;
  string segment_id = 2;

  PredicateAggregate predicates = 3;
}
message UpdateDynamicSegmentPredicatesResponse {}


message ArchiveDynamicSegmentByIdRequest {
  auth.v1.AuthContext auth_context = 1;
  string segment_id = 2;
}
message ArchiveDynamicSegmentByIdResponse { }


message ListDynamicSegmentsRequest {
  auth.v1.AuthContext auth_context = 1;
}
message ListDynamicSegmentsResponse {
  repeated DynamicSegment segments = 1;
}

message DynamicSegment {
  string id                            = 1;
  int32 account_id                     = 2;

  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;

  // Setment title
  string title                         = 5;
  bool is_archived                     = 6;
  // number of entries in the segment
  int64 segment_size                   = 7;
  PredicateAggregate predicates        = 8;
}


message StringPredicate {
  Op op                 = 1;
  string attribute_name = 2;
  string value          = 3;

  enum Op {
    IS_UNSET        = 0;
    IS_SET          = 1;

    IS_EQUAL        = 2;
    IS_NOT_EQUAL    = 3;

    STARTS_WITH  = 4;
    ENDS_WITH    = 5;

    CONTAINS     = 6;
    DOES_NOT_CONTAIN = 7;
  }
}

message BoolPredicate {
  Op op                 = 1;
  string attribute_name = 2;
  bool value            = 3;

  enum Op {
    IS_UNSET    = 0;
    IS_SET      = 1;

    IS_EQUAL   = 2;
  }
}

message NumberPredicate {
  Op op                 = 1;
  string attribute_name = 2;
  int64 value           = 3;
  int64 value2          = 4;

  enum Op {
    IS_UNSET        = 0;
    IS_SET          = 1;

    IS_EQUAL        = 2;
    IS_NOT_EQUAL    = 3;

    IS_GREATER_THAN = 4;
    IS_LESS_THAN    = 5;

    IS_BETWEEN      = 6;
  }
}

message DatePredicate {
  Op op                            = 1;
  string attribute_name            = 2;
  google.protobuf.Timestamp value  = 3;
  google.protobuf.Timestamp value2 = 4;

  enum Op {
    IS_UNSET        = 0;
    IS_SET          = 1;

    IS_EQUAL        = 2;
    IS_NOT_EQUAL    = 3;

    IS_GREATER_THAN = 4;
    IS_LESS_THAN    = 5;

    IS_BETWEEN      = 6;

    IS_AFTER        = 7;
    IS_BEFORE       = 8;
    IS_ON           = 9;
  }
}

message GeofencePredicate {
  Op op                 = 1;
  string attribute_name = 2;
  Location value        = 3;


  message Location {
    double longitude = 1;
    double latitude  = 2;
    int32  radius    = 3;
  }

  enum Op {
    IS_UNSET   = 0;
    IS_SET     = 1;

    IS_OUTSIDE = 2;
    IS_WITHIN  = 3;
  }
}

message VersionPredicate {
  Op op                 = 1;
  string attribute_name = 2;
  Version value         = 3;
  Version value2        = 4;

  enum Op {
    IS_UNSET                 = 0;
    IS_SET                   = 1;

    IS_EQUAL                 = 2;
    IS_NOT_EQUAL             = 3;

    IS_GREATER_THAN          = 4;
    IS_LESS_THAN             = 5;

    IS_BETWEEN               = 6;

    IS_GREATER_THAN_OR_EQUAL = 7;
    IS_LESS_THAN_OR_EQUAL    = 8;
  }
}

message PredicateAggregate {
  enum Condition {
    ANY = 0;
    ALL = 1;
  }

  Condition condition           = 1;

  repeated Predicate predicates = 2;
}

message Predicate {
  oneof value {
    StringPredicate   string_predicate   = 1;
    BoolPredicate     bool_predicate     = 2;
    NumberPredicate   number_predicate   = 3;
    DatePredicate     date_predicate     = 4;
    VersionPredicate  version_predicate  = 5;
    GeofencePredicate geofence_predicate = 6;
  }
}

